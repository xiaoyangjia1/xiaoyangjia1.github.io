<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue是如何组合起来的</title>
      <link href="/2021/12/13/vue%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
      <url>/2021/12/13/vue%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/13/3xwHMI4YduZUBFf.jpg" alt="微信图片_20211213123526.jpg"></p><h2 id="我们编写的HTML如何被浏览器渲染到页面上的"><a href="#我们编写的HTML如何被浏览器渲染到页面上的" class="headerlink" title="我们编写的HTML如何被浏览器渲染到页面上的?"></a>我们编写的HTML如何被浏览器渲染到页面上的?</h2><p><img src="https://s2.loli.net/2021/12/12/bl43VrnNYxg7KCc.png" alt="image.png"></p><p><code>html</code>映射成一个个<code>DOM</code>节点，为了与DOM交互，我们可以编写<code>javascript</code></p><p><img src="https://s2.loli.net/2021/12/12/gkRbTyjnNquAeCz.png" alt="image.png"></p><p>但一个网页上有成千上万个<code>dom</code>节点，如果我们都要一个个去获取操作，那会很麻烦。</p><p>这就是<code>vue</code>这些框架诞生的意义，让它去帮助我们干这些重活，并进行大量<code>javascript</code>调用。</p><p>但如果搜索和更新需要遍历整个<code>DOM</code>树会让工作量变得很大，效率也会很慢，所以这就是<code>vue</code>和其他类似框架应用虚拟DOM的原因。</p><p><code>Virtual DOM</code>是用<code>javascript</code>对象表示DOM的一种形式，虚拟<code>dom</code>是由<code>vue</code>中的渲染函数生成返回的。</p><p><img src="https://s2.loli.net/2021/12/12/FdN5UH86lLVgOsG.png" alt="image.png"></p><p>当组件发生改变时，<code>Render</code>函数将从新运行，生成一个新的虚拟<code>dom</code>与旧的虚拟<code>dom</code>发送到<code>vue</code>中进行比对，以最高效的形式在网页上进行更新</p><p><img src="C:/Users/yangqixiang/AppData/Roaming/Typora/typora-user-images/image-20211212160843891.png" alt="image-20211212160843891"></p><h2 id="vue的三大模块"><a href="#vue的三大模块" class="headerlink" title="vue的三大模块"></a>vue的三大模块</h2><p>响应式模块、编译器模块和渲染模块是<code>vue</code>的核心三大模块</p><h3 id="响应式模块"><a href="#响应式模块" class="headerlink" title="响应式模块"></a>响应式模块</h3><p>我们之前学习了<code>vue</code>的响应式原理，大概总结就是：该模块允许我们创建<code>javascript</code>响应对象,并可以观察其变化，当使用这些对象的代码运行时，它们会被跟踪。当响应对象变化时，它们可以做出相应改变。</p><h3 id="编译器模块"><a href="#编译器模块" class="headerlink" title="编译器模块"></a>编译器模块</h3><p>它知道如何获取HTML模板,并将他们编译成渲染函数，浏览器可以只接收渲染函数。</p><h3 id="渲染模块"><a href="#渲染模块" class="headerlink" title="渲染模块"></a>渲染模块</h3><p>渲染模块包含在网页上渲染组件的三个不同阶段，分别为渲染阶段、挂载阶段、补丁阶段。</p><img src="C:/Users/yangqixiang/AppData/Roaming/Typora/typora-user-images/image-20211212162506313.png" alt="image-20211212162506313" style="zoom: 33%;" /><h4 id="渲染阶段"><a href="#渲染阶段" class="headerlink" title="渲染阶段"></a>渲染阶段</h4><p>该阶段负责通过渲染函数生成虚拟<code>dom</code>节点</p><h4 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h4><p>该阶段负责将虚拟<code>dom</code>通过调用<code>DOM</code> <code>API</code>创建网页</p><h4 id="补丁阶段"><a href="#补丁阶段" class="headerlink" title="补丁阶段"></a>补丁阶段</h4><p>该阶段渲染器负责将新旧虚拟DOM进行比对，并只更新网页变化的部分</p><h2 id="小运行流程"><a href="#小运行流程" class="headerlink" title="小运行流程"></a>小运行流程</h2><p>假设现在某个组件内有一个模板，以及在模板内部使用的响应式对象。</p><ol><li>首先，编译器模块的模板编译器将<code>html</code>模板转换为一个<code>render</code>函数</li><li>然后使用响应式模块初始化响应式对象</li><li>接下来进入渲染阶段，在渲染模块中调用<code>render</code>函数，函数引用了响应对象，这个对象被监视跟踪。<code>render</code>函数返回一个虚拟<code>DOM</code>节点。</li><li>在挂载阶段，调用<code>mount</code>函数使用 虚拟<code>dom</code>节点创建<code>web</code>页面。</li><li>之后，如果响应对象发生变化，由于它被监视跟踪，所以渲染器会再次调用<code>render</code>函数创建一个新的虚拟<code>dom</code>节点</li><li>渲染器将新旧节点发到<code>patch</code>函数中进行比对，然后只更新改变的部分</li></ol><h2 id="vue3-Template-explorer"><a href="#vue3-Template-explorer" class="headerlink" title="vue3 Template explorer"></a>vue3 Template explorer</h2><p>左边是<code>HTML</code>模板，右边是实时编译的<code>render</code>函数,右上方可提供多种选项的编译方式</p><p><img src="https://s2.loli.net/2021/12/12/7KhzBRXYAj8gcUq.png" alt="image.png"></p><p>如果编译器没有提示，虚拟DOM渲染器只看到整个<code>DOM</code>树，并不知道哪部分会改变。</p><p>编译器的工作就是提供这些信息，让虚拟<code>dom</code>可以直接定位到正确的动态节点上。</p><p>编译器运用了块的思想，将模板的根变成一个块，注意右边的<code>_openBlock</code>函数，当这个块打开时，会检查其中的动态子节点，有/*Text*/类似标注的会被跟踪，并加入当前打开的<code>block</code>作为动态节点。</p><p>在整个渲染函数调用之后，根会有一个额外的属性称为动态子节点，其值只包含动态部分的节点</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   </code></pre><p>上面的代码中，<code>span</code>就是<code>div</code>这个块的动态子节点</p><h2 id="来个mini-vue"><a href="#来个mini-vue" class="headerlink" title="来个mini-vue"></a>来个mini-vue</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.red</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.green</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// render function</span>  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return vdom</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      tag<span class="token punctuation">,</span>      props<span class="token punctuation">,</span>      children<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vdom<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> vdom<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>            key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            vdom<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> vdom<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vdom<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        vdom<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vdom<span class="token punctuation">.</span>el <span class="token operator">=</span> el<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVdom<span class="token punctuation">,</span> newVdom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVdom<span class="token punctuation">.</span>tag <span class="token operator">===</span> newVdom<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVdom<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> oldProps <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> newVdom<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">const</span> newChildren <span class="token operator">=</span> newVdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren <span class="token operator">!==</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 都是数组，源码中有使用key进行比较,现在假设没有key</span>          <span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// replace</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// reactivity</span>  <span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span>  <span class="token keyword">let</span> <span class="token function-variable function">watchEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span> <span class="token comment">// Set this as the activeEffect</span>    <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run it</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Unset it</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Only track if there is an activeEffect</span>      <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// run them all</span>        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 将嵌套对象包裹在自己的响应式代理中</span>          <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>        <span class="token string">"div"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"表哥，我出来了喔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">mountApp</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldVdom<span class="token punctuation">;</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        oldVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mount</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>        isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldVdom <span class="token operator">=</span> newVdom<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">mountApp</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>哇哦，棒！但事实上，vue远没有这么简单，还有很多边界条件，包括diff算法比对，等等很多需要到源码里一探究竟。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL到页面渲染数据这段时间内发生了啥事？聊聊浏览器缓存</title>
      <link href="/2021/12/11/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2021/12/11/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/11/K8bXThwnx7m53au.jpg" alt="微信图片_20211211125532.jpg"></p><p>先来一个总体流程图</p><p><img src="https://segmentfault.com/img/remote/1460000017184704"></p><p>大致过程如下：</p><ul><li><p>解析URL,检测浏览器缓存</p></li><li><p>DNS解析：将域名解析成IP地址</p></li><li><p>TCP三次握手建立连接</p></li><li><p>发送http请求</p></li><li><p>服务器处理请求并返回HTTP报文</p></li><li><p>浏览器解析渲染页面</p></li><li><p>断开连接：TCP四次挥手</p></li></ul><h2 id="那么，天天输入的URL到底是个啥？"><a href="#那么，天天输入的URL到底是个啥？" class="headerlink" title="那么，天天输入的URL到底是个啥？"></a>那么，天天输入的URL到底是个啥？</h2><ul><li>URL(Uniform Resource Locator)，顾名思义，统一资源定位符，也就是我们俗称的网址,它是通过一种语法规则让我们能从互联网上得到资源位置和访问这些资源的方法。</li></ul><p>那么它的语法规则是啥样嘞</p><ul><li>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;?&lt;参数&gt;#&lt;锚点&gt;</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/035928222c2b4baa8e6089f307d06dfd~tplv-k3u1fbpfcp-watermark.awebp"></p><h2 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h2><p>如果我们输入的是一个非URL结构的字符串，浏览器会用默认的搜索引擎搜索该字符串。输入格式正确的话，浏览器会解析出协议、主机、端口、路径、参数、锚点等信息，并构造一个HTTP请求。</p><p>在浏览器发送请求之前，为了减少发送的请求数，更快获取数据呈现给用户，会有一个命中强缓存和协商缓存的策略。</p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><h3 id="啥是浏览器缓存啊"><a href="#啥是浏览器缓存啊" class="headerlink" title="啥是浏览器缓存啊"></a>啥是浏览器缓存啊</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/21/1686e2735267bebb~tplv-t2oaga2asx-watermark.awebp"></p><p>跟图示一样，浏览器缓存其实就是浏览器根据发起或响应请求头中指定的缓存策略将得到的响应数据保存在本地，方便将来直接获取的一种行为。</p><h3 id="资源保存到本地究竟是保存到哪里？"><a href="#资源保存到本地究竟是保存到哪里？" class="headerlink" title="资源保存到本地究竟是保存到哪里？"></a>资源保存到本地究竟是保存到哪里？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e8553f944da4a4ea95333192a62f149~tplv-k3u1fbpfcp-watermark.awebp"></p><p>由图片可以看出，缓存位置主要分memory和disk两种,但并不是只有这两种方式</p><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。<strong>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</strong>。</p><p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h4 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h4><p><code>Memory Cache</code>是将资源缓存到内存中，读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭Tab页面，内存中的缓存也就被释放了。</p><p><code>Webkit</code>早已支持memory Cache,目前<code>Webkit</code>资源分为主资源和派生资源两类。主资源包括HTML页面或者下载项；派生资源包括HTML页面内嵌的图片或脚本链接，分别对应代码中<code>MainResourceLoader</code>和<code>SubresourceLoader</code>两个类。虽然<code>Webkit</code>支持<code>memoryCache</code>,但是也只是针对派生资源，它对应的类为<code>CachedResource</code>，用于保存原始数据（比如<code>CSS</code>，<code>JS</code>等，以及解码过的图片数据。</p><p>需要注意的事情是，内存缓存在缓存资源时并不关心返回资源的HTTP缓存头<code>Cache-Control</code>是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对<code>Content-Type</code>，<code>CORS</code>等其他特征做校验。</p><h4 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h4><p><code>Disk Cache</code>是将资源缓存到硬盘中，虽然读取速度慢，但是容量和存储时效都比<code>Memory Cache</code>好。</p><p>它也只能存储一些派生类资源文件，一般存储CSS文件。</p><p>因为css文件加载一次就可以渲染出来，我们不会频繁的去读取它，所以它不适合存在内存当中。</p><p>但js之类的脚本随时可能会执行，如果脚本在磁盘中，我们在执行脚本的时候需要从磁盘取到内存中，这样IO开销比较大，有可能导致浏览器失去响应。</p><h4 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h4><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂</strong>，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p><ul><li>所有的资源都能被推送，并且能够被缓存,但是 Edge 和 Safari 浏览器支持相对比较差</li><li>可以推送 no-cache 和 no-store 的资源</li><li>一旦连接被关闭，Push Cache 就被释放</li><li>多个页面可以使用同一个HTTP/2的连接，也就可以使用同一个Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的tab标签使用同一个HTTP连接。</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>你可以给其他域名推送资源</li></ul><h3 id="访问缓存优先级"><a href="#访问缓存优先级" class="headerlink" title="访问缓存优先级"></a>访问缓存优先级</h3><p>电脑缓存是当cpu在读取数据的时候，先是从缓存文件中查找，然后找到之后会自动读取，再输入到cpu进行处理，当然如果没有在缓存中找到对应的缓存文件的话，那么就会从内存中读取并且传输给cpu来处理。当然这样的话需要一定的时间所以会很慢。等cpu处理之后，就很快把这个数据所在的数据块保存在缓存文件中，这样的话在以后读取这项数据的时候就直接在缓存中进行，不要重复在内存中调用并读取数据了。</p><p>浏览器访问缓存也有优先级</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><p>如果以上四种缓存都没有命中的话，那么只能发起请求来获取资源了。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>之前就一直知道强缓存和协商缓存的鼎鼎大名，但一直没有花时间去真正的琢磨它。现在，咱就来好好学学。</p><p>强缓存就是让浏览器缓存该请求的响应资源，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</p><p>强缓存又分为两种<code>Expires</code>和<code>Cache-Control</code>,<strong>两者同时存在的话，Cache-Control优先级高于Expires</strong>；</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0f5e26bfdb749e6a9e339dfac224fe1~tplv-k3u1fbpfcp-watermark.awebp"></p><h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><ul><li>版本：HTTP/1.0</li><li>来源：存在于服务端返回的响应头中</li><li>语法：Expires: Wed, 22 Nov 2019 08:41:00 GMT</li><li>使用方式： 需要和Last-modified结合使用</li><li>缺点：<strong>Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效</strong>,Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</li></ul><h5 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h5><ul><li>版本：HTTP/1.1</li><li>来源：响应头和请求头</li><li>语法：Cache-Control:max-age=3600</li><li>使用方式： 可以组合使用多种指令</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3174701-8ff981603cdfded0?imageMogr2/auto-orient/strip%7CimageView2/2/w/562/format/webp"></p><ul><li>缺点：时间最终还是会失效</li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba010a1229f477b93e3432e5e8be509~tplv-k3u1fbpfcp-watermark.awebp"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be9fb406e1544f3a9c5676d91be15a8~tplv-k3u1fbpfcp-watermark.awebp"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40165c39fb75499db999177b9a07e353~tplv-k3u1fbpfcp-watermark.awebp"></p><h5 id="Last-Modified-响应头-，If-Modified-Since-请求头"><a href="#Last-Modified-响应头-，If-Modified-Since-请求头" class="headerlink" title="Last-Modified(响应头)，If-Modified-Since(请求头)"></a>Last-Modified(响应头)，If-Modified-Since(请求头)</h5><p>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上<code>Last-Modified</code>这个字段。 浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。 服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中该资源的最后修改时间<code>Last-Modified</code>对比,询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。</p><p>但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code>。</p><h5 id="ETag-响应头-、If-None-Match-请求头"><a href="#ETag-响应头-、If-None-Match-请求头" class="headerlink" title="ETag(响应头)、If-None-Match(请求头)"></a>ETag(响应头)、If-None-Match(请求头)</h5><p><code>ETag</code>是服务器根据当前文件的内容，给文件生成的唯一标识，<strong>只要资源有变化，Etag就会重新生成</strong>。服务器通过响应头把这个值给浏览器。 浏览器接收到ETag的值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，并放到请求头中，然后发给服务器。</p><p>服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。</p><h6 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h6><ul><li>首先在精确度上，Etag要优于Last-Modified。</li></ul><p>Last-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。</p><ul><li>第二在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。</li><li>第三在优先级上，服务器校验优先考虑Etag</li></ul><h2 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h2><h3 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h3><blockquote><p>Cache-Control: no-cache</p></blockquote><p>对于频繁变动的资源，首先需要使用<code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><h3 id="不常变化的资源"><a href="#不常变化的资源" class="headerlink" title="不常变化的资源"></a>不常变化的资源</h3><blockquote><p>Cache-Control: max-age=31536000</p></blockquote><p>通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 <code>max-age=31536000</code> (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。<br> 在线提供的类库 (如 <code>jquery-3.3.1.min.js</code>, <code>lodash.min.js</code> 等) 均采用这个模式。</p><h2 id="用户行为对浏览器缓存的影响"><a href="#用户行为对浏览器缓存的影响" class="headerlink" title="用户行为对浏览器缓存的影响"></a>用户行为对浏览器缓存的影响</h2><p>所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：</p><ul><li>打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。</li><li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。</li><li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code>(为了兼容，还带了 <code>Pragma: no-cache</code>),服务器直接返回 200 和最新内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计动态规划的通用技巧：数学归纳思想</title>
      <link href="/2021/12/10/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/"/>
      <url>/2021/12/10/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/10/lVhBHimRf7NrqdO.jpg" alt="微信图片_20211210233510.jpg"></p><h2 id="先放题目"><a href="#先放题目" class="headerlink" title="先放题目"></a>先放题目</h2><p>题目描述：给定一个无序的整数数组，找到其中最长上升子序列</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>输出：<span class="token number">4</span>解释：最长递增子序列是 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span>，因此长度为 <span class="token number">4</span> 。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">4</span></code></pre><p>示例 3：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><p>首先我们需要明白子序列的概念，子序列不等同于子串，子串一定是连续的，子序列不一定是连续。</p><h2 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h2><p>动态规划的核心设计思想是数学归纳法。</p><p>比如我们想证明一个数学结论，那么我们先假设这个结论在k&lt;n时成立，然后根据这个假设，想办法推导证明出k=n的时候结论也成立。如果证明的出来，说明这个结论对于k等于任何数都成立。</p><h2 id="解题推算"><a href="#解题推算" class="headerlink" title="解题推算"></a>解题推算</h2><p>在本题中，我们可以根据数学归纳法的设计思想，假设dp[0…i-1]都已经算出来了，然后根据前面的结果算出dp[i].</p><p>那我们定义dp[i]表示以nums[i]这个元素结尾的最长递增子序列的长度。</p><p>根据这个定义我们可以知道</p><ul><li>dp[i]的初始值都为1，因为以nums[i]结尾的最长递增子序列起码要包含它自己。</li><li>最终结果为dp数组的最大值，可以建立一个max变量保存当前最大值</li></ul><p>那我们如何根据dp[0…i-1]求出dp[i]嘞</p><ul><li>我们可以找前面那些结尾比nums[i]小的子序列，然后选择最长的那个加1即为dp[i]的值</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">let</span> dp<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="再来一刀"><a href="#再来一刀" class="headerlink" title="再来一刀"></a>再来一刀</h2><p>题目描述：给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。</p><p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p>注意：不允许旋转信封。</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：envelopes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">3</span>解释：最多信封的个数为 <span class="token number">3</span><span class="token punctuation">,</span> 组合为<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：envelopes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><h3 id="解题分析"><a href="#解题分析" class="headerlink" title="解题分析"></a>解题分析</h3><p>这道题其实就是最长递增子序列的变种，因为每次合法的嵌套相当于就是在找一个最长递增子序列，难点在于这次是在二维数组里面找。</p><p>我们先对宽度w进行升序排序，如果遇到w相同的情况，则按高度进行降序排序.因为两个宽度相同的信封不能相互包含，而逆序排序可以保证在W相同的数对中最多选取一个计入LIS。排序后，我们把所有的H作为一个数组进行计算LIS，结果就是这道题的答案</p><p>对给的数对进行排序</p><img src="https://s2.loli.net/2021/12/11/F2bocLCHA8W6XNj.jpg" alt="微信图片_20211211163508.jpg" style="zoom: 25%;" /><p>在h上寻找最长递增子序列</p><img src="https://s2.loli.net/2021/12/11/cvT4FuowBL1pqCs.jpg" alt="微信图片_20211211163512.jpg" style="zoom: 25%;" /><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxEnvelopes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">envelopes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    envelopes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> envelopes<span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">let</span> dp<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="好兄弟，再来一刀"><a href="#好兄弟，再来一刀" class="headerlink" title="好兄弟，再来一刀"></a>好兄弟，再来一刀</h2><p>上题目，已麻目</p><p>题目描述：给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token number">6</span>解释：连续子数组 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 的和最大，为 <span class="token number">6</span> 。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><p>示例 3：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>输出：<span class="token number">23</span></code></pre><h3 id="解析分析"><a href="#解析分析" class="headerlink" title="解析分析"></a>解析分析</h3><p>好家伙，这怎么又跟数学归纳法联系上了呢</p><p>假设我们已经算出了dp[i-1],如何推导出dp[i]呢，这是个问题</p><p>dp[i]有两个选择，要么与前面的相邻子数组链接，要么不与它连接，自成一派，我们取结果更大的那个。</p><p>之前的dp都是数组，但这道题中dp[i]只与dp[i-1]有关系，我们可以压缩成两个变量dp0,dp1。</p><p>我们还要设一个变量res保存遍历过程中的最大值</p><h3 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dp0<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> dp1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span>dp0    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp1<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        dp0<span class="token operator">=</span>dp1        res<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>dp1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3响应性原理，咱深入一下下</title>
      <link href="/2021/12/10/vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2021/12/10/vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/10/Va3njs4qrHuAOKF.jpg"></p><h2 id="什么是响应式？"><a href="#什么是响应式？" class="headerlink" title="什么是响应式？"></a>什么是响应式？</h2><p>响应式是一种允许我们以声明式的方式去适应变化的编程范例。</p><p>这说明我们需要做到一下几点：</p><ul><li>当一个值被读取时进行跟踪</li><li>当某个值改变时进行检测</li><li>重新运行代码来读取原始值</li></ul><h2 id="了解反应性"><a href="#了解反应性" class="headerlink" title="了解反应性"></a>了解反应性</h2><p>看看这个简单的应用程序：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Price: $&#123;&#123; product.price &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Total: $&#123;&#123; product.price * product.quantity &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Taxes: $&#123;&#123; totalPriceWithTax &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      product<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        price<span class="token operator">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>        quantity<span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">totalPriceWithTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">.</span>quantity <span class="token operator">*</span> <span class="token number">1.03</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><code>Vue</code> 的 <code>Reactivity</code> 系统知道如果<code>price</code>发生变化，它应该做三件事：</p><ul><li>更新<code>price</code>我们网页上的值。</li><li>重新计算乘以 的表达式<code>price * quantity</code>，并更新页面。</li><li><code>totalPriceWithTax</code>再次调用该函数并更新页面。</li></ul><p>但是等等，<code>Vue</code> 的 Reactivity 系统如何知道在<code>price</code>更改时更新什么，以及它如何跟踪所有内容？</p><p><strong>这不是 JavaScript 编程通常的工作方式</strong></p><p>运行此代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity  <span class="token comment">// 10 right?</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">total is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><p>你认为它会打印什么？由于我们没有使用<code> Vue</code>，它将打印 10。</p><pre class="language-none"><code class="language-none">&gt;&gt; total is 10</code></pre><p>在 <code>Vue </code>中，我们希望<code>total</code>随时更新<code>price</code>或<code>quantity</code>。我们想要：</p><pre class="language-none"><code class="language-none">&gt;&gt; total is 40</code></pre><p>不幸的是，<code>JavaScript</code> 是过程性的，而不是反应性的，所以这在现实生活中是行不通的。为了使<code>total</code>响应式，我们必须使用 <code>JavaScript</code> 使事情表现得不同。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>正如您在上面的代码中看到的，为了开始构建反应性，我们需要保存我们计算 的方式<code>total</code>，以便我们可以在<code>price</code>或<code>quantity</code>更改时重新运行它。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先，我们需要某种方式来告诉我们的应用程序，“存储我将要运行的代码（效果），我可能需要你在其他时间运行它。” 然后我们要运行代码，如果<code>price</code>或<code>quantity</code>变量得到更新，再次运行存储的代码。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775377_1.opt.jpg?alt=media&token=c85ffe5b-ff63-4143-ae4e-b1f52b9c2eed" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775377_1.opt.jpg?alt=media&amp;token=c85ffe5b-ff63-4143-ae4e-b12e52b"></p><p>我们可以通过记录函数（效果）来做到这一点，以便我们可以再次运行它。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity <span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Remember this in case we want to run it later</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Also go ahead and run it</span></code></pre><p>为了定义<code>track</code>，我们需要一个地方来存储我们的效果，我们可能有很多。我们将创建一个名为 的变量<code>dep</code>，作为依赖项。我们称之为依赖是因为通常在观察者设计模式中，依赖有订阅者（在我们的例子中是效果），当对象改变状态时会得到通知。我们可能会像我们在本教程的 <code>Vue 2</code> 版本中所做的那样，使依赖成为一个具有订阅者数组的类。但是，由于它需要存储的只是一组效果，我们可以简单地创建一个<strong>Set</strong>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Our object tracking a list of effects</span></code></pre><p>然后我们的<code>track</code> 函数可以简单地将我们的效果添加到这个集合中：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">track</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Store the current effect</span><span class="token punctuation">&#125;</span></code></pre><p><code>JavaScript</code> <code>Array</code> 和<code> Set</code> 之间的区别在于 <code>Set</code> 不能有重复的值，并且它不像数组那样使用索引。</p><p>我们正在存储<code>effect</code>（在我们的例子中<code>&#123; total = price * quantity &#125;</code>），以便我们稍后运行它。这是此 <code>dep</code> 集的可视化：</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775378_2.opt.jpg?alt=media&token=8fb9b10b-c3f8-4075-9b17-c2dd263419f9" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775378_2.opt.jpg?alt=media&amp;token=8fb9b10b-c3f8-4075-9b1634c29f"></p><p>让我们编写一个触发器函数来运行我们记录的所有内容。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>这将遍历我们存储在<code>dep</code>中的所有匿名函数并执行它们中的每一个。然后在我们的代码中，我们可以：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 10</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 40</span></code></pre><p>这里是完整的代码。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 10</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 40</span></code></pre><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763783549_3.opt.png?alt=media&token=298f665d-971f-40e3-a099-8b80c2f572f5" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763783549_3.opt.png?alt=media&amp;token=298f665d-971f-40e3-a0992f2f2f2f"></p><h2 id="问题：多个属性"><a href="#问题：多个属性" class="headerlink" title="问题：多个属性"></a>问题：多个属性</h2><p>我们可以根据需要继续跟踪效果，但是我们的反应式对象将具有不同的属性，并且这些属性每个都需要自己的<code>dep</code>（这是一组<code>effects</code>）。在这里查看我们的对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span></code></pre><p>我们的<code>price</code>财产需要它自己的 <code>dep </code>(set of <code>effects</code>)，而我们<code>quantity</code>需要它自己的<code>dep</code>(set of <code>effects</code>)。让我们构建我们的解决方案来正确记录这些。</p><h3 id="解决方案：depsMap"><a href="#解决方案：depsMap" class="headerlink" title="解决方案：depsMap"></a>解决方案：<code>depsMap</code></h3><p>当我们调用<code> track</code> 或<code> trigger</code> 时，我们现在需要知道目标对象中的哪个属性（<code>price</code>或<code>quantity</code>）。为此，我们将创建一个<code>depsMap</code>类型为<strong>Map</strong>（想想键和值）的<strong>。</strong> 以下是我们如何可视化它：</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763787347_4.opt.jpg?alt=media&token=cc2f2262-86f7-41e1-bc74-03d8da51cb75" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763787347_4.opt.jpg?alt=media&amp;token=cc2f2262-86f7-41e1-bc74-03d7"></p><p>请注意如果<code>depsMap</code>有一个键，它将是我们要添加（或跟踪）新的属性名称<code>effect</code>。因此，我们需要将此键发送到该<code>track</code>函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Make sure this effect is being tracked.</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dep (effects) that need to be run when this key (property) is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dep (effects) on this key yet</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dep</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the dep (effects) associated with this key</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// If they exist</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 10</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'quantity'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 15</span></code></pre><h2 id="问题：多个反应对象"><a href="#问题：多个反应对象" class="headerlink" title="问题：多个反应对象"></a>问题：多个反应对象</h2><p>这很有效，直到我们有多个需要跟踪效果的反应性对象（不仅仅是产品）。现在我们需要一种<code>depsMap</code>为每个对象（例如产品）存储 a 的方法。我们需要另一个 Map，每个对象一个，但关键是什么？如果我们使用<strong>WeakMap，</strong>我们实际上可以使用对象本身作为键。 **<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a>**是一个 JavaScript Map，它只使用对象作为键。例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">"example code to test"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ---> "example code to test"</span></code></pre><p>显然这不是我们要使用的代码，但我想向您展示我们如何通过<code>targetMap</code>使用我们的产品对象作为键。我们称我们的 WeakMap为<code>targetMap</code>是因为我们将考虑 target 我们正在瞄准的对象。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763789885_5.opt.jpg?alt=media&token=110bf30c-3b78-482f-bac2-30ca8403bfe0" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763789885_5.opt.jpg?alt=media&amp;token=110bf30c-3b78-482f-bac2-3bfe08"></p><p>当我们调用<code>track</code>或<code>trigger</code>我们现在需要知道我们的目标是哪个对象。因此，<code>target</code>当我们调用它时，我们将同时发送 the和 key。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it's updated</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We need to make sure this effect is being tracked.</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Get the current depsMap for this target</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no map.</span>    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create one</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dependencies (effects)</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dependency map</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 10</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token function">trigger</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 15</span></code></pre><p>拍拍自己的后背。战斗已经进行了一半。</p><p>但是，目前我们仍然需要手动调用<code>track</code>和<code>trigger</code>。我们将学习如何使用<code>Reflect</code>和<code>Proxy</code>自动调用它们。</p><h3 id="解决方案：挂钩获取和设置"><a href="#解决方案：挂钩获取和设置" class="headerlink" title="解决方案：挂钩获取和设置"></a>解决方案：挂钩获取和设置</h3><p>我们需要一种方法来挂钩（或侦听）我们的反应式对象上的 <code>get</code> 和 <code>set</code> 方法。</p><p><strong>GET 属性 =&gt; 我们需要<code>track</code>当前<code>effect</code></strong></p><p><strong>SET 属性 =&gt; 我们需要<code>trigger</code>此属性的任何跟踪依赖项（效果）</strong></p><p>在<code>Vue3</code>中通过 <code>ES6</code>的<code>Reflect</code>和<code>Proxy</code>我们可以拦截获取和设置调用。以前在<code>Vue 2</code>中我们用 <code>ES5</code> 的<code>Object.defineProperty</code>做到了这一点。</p><h2 id="理解-ES6-反射"><a href="#理解-ES6-反射" class="headerlink" title="理解 ES6 反射"></a>理解 <code>ES6</code> 反射</h2><p>要打印出一个对象属性，我可以这样做：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token comment">// or </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> product<span class="token punctuation">[</span><span class="token string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>但是，我也可以使用 GET 对象的值<code>Reflect</code>。 <code>Reflect</code>允许您获取对象的属性。这只是我上面写的另一种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>为什么使用<code>reflect</code>？好问题！因为它具有我们稍后需要的功能，所以请保持这种想法。</p><h2 id="了解-ES6-Proxy"><a href="#了解-ES6-Proxy" class="headerlink" title="了解 ES6 Proxy"></a>了解 <code>ES6</code> Proxy</h2><p>一个<code>Proxy</code>是另一个对象的占位符，默认情况下委托给该对象。因此，如果我运行以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>该<code>proxiedProduct</code>委托给<code>product</code>它返回<code>quantity</code>的值2。请注意<code>Proxy</code>的第二个参数<code>&#123;&#125;</code>？这称为  <code>handler</code>，我们可以向它传递捕获器<code>traps</code>用于定义代理对象上的自定义行为，如拦截<code>get</code>和<code>set</code>调用。下面是我们如何在我们的<code>handler</code>上设置<code>get</code>捕获器：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Not the value'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>在控制台中，我会看到：</p><p><em>Get was called</em></p><p><em>Not the value</em></p><p>我们重新编写了<code>get</code>访问属性值时返回的内容。我们可能应该返回实际值，我们可以这样做：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &lt;--- The target (our object) and key (the property name)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>请注意，该<code>get</code>函数有两个参数，<code>target</code>是我们的对象 ( <code>product</code>) 和<code>key</code>是我们试图获取的<code>property</code>，在本例中是<code>quantity</code>。现在我们看到：</p><p><em>Get was called with key =quantity</em></p><p><em>2</em></p><p>这也是我们可以使用 Reflect 并为其添加额外参数的地方。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &lt;--- notice the receiver</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token comment">// &lt;----</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>请注意，我们的 get 有一个额外的参数<code>receiver</code>，我们将其作为参数发送到<code>Reflect.get</code>. 这确保<code>this</code>当我们的对象从另一个对象继承值/函数时使用正确的值。这就是为什么我们总是在 <code>Proxy</code>内部使用<code>Reflect</code>，所以我们可以保留我们正在自定义的原始行为。</p><p>现在让我们添加一个 setter 方法，这里应该不会有什么大惊喜：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Set was called with key = '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' and value = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>proxiedProduct<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>请注意，它<code>set</code>看起来与 get 非常相似，不同之处在于它使用<code>Reflect.set</code>接收<code>value</code>来设置<code>target</code>（产品）。我们预期的输出是：</p><p><em>Set was called with key = quantity and value = 4</em></p><p><em>Get was called with key = quantity</em></p><p><em>4</em></p><p>我们可以通过另一种方式封装这段代码，这就是您在<code>Vue 3</code> 源代码中看到的。首先，我们将这个代理代码包装在一个<code>reactive</code> 返回代理的函数中，如果您使用过 <code>Vue 3 Composition API</code>，它应该看起来很熟悉。然后我们将单独声明我们<code>handler</code>的<code>traps</code>并将它们发送到我们的代理中。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Set was called with key = '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' and value = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- Returns a proxy object</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>这将返回与上面相同的结果，但现在我们可以轻松创建多个反应对象。</p><h2 id="结合代理-效果存储"><a href="#结合代理-效果存储" class="headerlink" title="结合代理+效果存储"></a>结合代理+效果存储</h2><p>如果我们使用创建反应式对象的代码，请记住：</p><p><strong>GET 属性 =&gt; 我们需要<code>track</code>当前的效果</strong></p><p><strong>SET 属性 =&gt; 我们需要这个属性的<code>trigger</code>任何跟踪依赖项 ( <code>effects</code>)</strong></p><p>我们可以开始想象我们需要调用的地方<code>track</code>和<code>trigger</code>上面的代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>        <span class="token comment">// Track</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Only if the value changes </span>        <span class="token comment">// Trigger</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>现在让我们把这两段代码放在一起：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it's updated</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We need to make sure this effect is being tracked.</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Get the current depsMap for this target</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no map.</span>    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create one</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dependencies (effects)</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dependency map</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before updated quantity total = '</span> <span class="token operator">+</span> total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after updated quantity total = '</span> <span class="token operator">+</span> total<span class="token punctuation">)</span></code></pre><p>请注意我们如何不再需要调用<code>trigger</code>，<code>track</code>因为它们在我们的<code>get</code>和<code>set</code>方法中被正确调用。运行这段代码给我们：</p><p><em>before updated quantity total = 10</em></p><p><em>after updated quantity total = 15</em>*</p><h4 id="被代理的对象"><a href="#被代理的对象" class="headerlink" title="被代理的对象"></a>被代理的对象</h4><p>vue在内部跟踪所有已经被转成响应式的对象，所以它总是为同一个对象返回相同的代理</p><p>当从一个响应式代理中访问一个嵌套对象时，该对象在被返回之前也被转为一个代理</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将嵌套对象包裹在自己的响应式代理中</span>      <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><p>哇，我们已经走了很长一段路！在此代码可靠之前，只有一个错误需要修复。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Updated quantity to ='</span><span class="token operator">+</span>product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token comment">// track gets called when we GET a property on our reactive object,even if we're not in a effect</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><p>现在，只要反应性对象属性是<code>get</code> ，<code>track</code>就会被调用，这样不好。具体来说，我们应该只在<code>effect</code>内追踪函数。为此我们将引入一个<code>activeEffect</code>变量，它是现在正在运行中的<code>effect</code>。</p><p>接下来我们优化一下<code>effect</code>函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> activeEffect<span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">// The active effect running</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    activeEffect<span class="token operator">=</span>eff <span class="token comment">// Set this as the activeEffect</span>    <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Run it</span>    activeEffect<span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">// Unset it</span><span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </code></pre><p>现在我们需要去更新<code>track</code>函数,让它去使用这个新的<code>activeEffect</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// Only track if there is an activeEffect</span>      <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>现在，我们来点高级的测试</p><p>首先我们需要了解一下<code>vue3</code>中的<code>ref</code>函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> r<span class="token operator">=</span><span class="token punctuation">&#123;</span>       <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> raw       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>newVal<span class="token operator">&amp;&amp;</span>raw<span class="token operator">!==</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               raw<span class="token operator">=</span>newVal              <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span></code></pre><p><code>vue3</code>就是这样做的，只不过源码更复杂一些，但这是核心</p><p>开始编写测试代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> salePrice<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    salePrice<span class="token punctuation">.</span>value<span class="token operator">=</span>product<span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><p>到现在已经很可以了，但我们会想，既然联动改变，为什么不用<code>computed</code>属性呢，OK，那我们再试试</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那接下来的输出应该和之前一样</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="proxy-vs-原始值"><a href="#proxy-vs-原始值" class="headerlink" title="proxy vs 原始值"></a>proxy vs 原始值</h3><p>最佳实践是永远不要持有对原始对象的引用，而只使用响应式版本。因为被代理对象与原始对象不相等</p><pre class="language-vue" data-language="vue"><code class="language-vue">const obj &#x3D; &#123;&#125;const wrapped &#x3D; new Proxy(obj, handlers)console.log(obj &#x3D;&#x3D;&#x3D; wrapped) &#x2F;&#x2F; false</code></pre><p><code>Vue</code> 不会在 Proxy 中包裹数字或字符串等原始值，所以你仍然可以对这些值直接使用 <code>===</code> 来比较：</p><pre class="language-vue" data-language="vue"><code class="language-vue">const obj &#x3D; reactive(&#123;  count: 0&#125;)console.log(obj.count &#x3D;&#x3D;&#x3D; 0) &#x2F;&#x2F; true</code></pre><h3 id="如何让渲染响应变化"><a href="#如何让渲染响应变化" class="headerlink" title="如何让渲染响应变化"></a>如何让渲染响应变化</h3><p>一个组件的模板被编译成<code>render</code>函数，渲染函数创建<code>VNodes</code>，描述该组件应该如何被渲染。它被包裹在一个副作用里，允许<code>vue</code>在运行的时候跟踪被触达的<code>property</code>.</p><p>一个 <code>render</code> 函数在概念上与一个 <code>computed</code> <code>property </code>非常相似。<code>Vue</code> 并不确切地追踪依赖关系是如何被使用的，它只知道在函数运行的某个时间点上使用了这些依赖关系。如果这些 <code>property</code> 中的任何一个随后发生了变化，它将触发副作用再次运行，重新运行 <code>render</code> 函数以生成新的 <code>VNodes</code>。然后这些举动被用来对 <code>DOM</code> 进行必要的修改。</p><h2 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span> <span class="token comment">// Set this as the activeEffect</span>  <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run it</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Unset it</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Only track if there is an activeEffect</span>    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> raw<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">&amp;&amp;</span> raw <span class="token operator">!==</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        raw <span class="token operator">=</span> newVal<span class="token punctuation">;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//   let salePrice = ref(0);</span><span class="token comment">//   let total = 0;</span><span class="token comment">//   effect(() => &#123;</span><span class="token comment">//     total = salePrice.value * product.quantity;</span><span class="token comment">//   &#125;);</span><span class="token comment">//   effect(() => &#123;</span><span class="token comment">//     salePrice.value = product.price * 0.9;</span><span class="token comment">//   &#125;);</span><span class="token comment">//   console.log(</span><span class="token comment">//     `Before updated total (shouled be 9) =$&#123;total&#125; salePrice (should be 4.5) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token comment">//   product.quantity = 3;</span><span class="token comment">//   console.log(</span><span class="token comment">//     `After updated total (shouled be 13.5) =$&#123;total&#125; salePrice (should be 4.5) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token comment">//   product.price = 10;</span><span class="token comment">//   console.log(</span><span class="token comment">//     `After updated total (shouled be 27) =$&#123;total&#125; salePrice (should be 9) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>恭喜你，太棒了！相信你看完后也对<code>vue3</code>的响应式有了一定的理解了，当然，本文只是针对<code>vue3</code>响应性的核心实现进行复现，真正的源码还是很复杂的，但现在你应该已经能看你的懂源码了。</p><p><a href="https://github.com/vuejs/vue-next/tree/master/packages/">源码地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划啊动态规划</title>
      <link href="/2021/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%95%8A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2021/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%95%8A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/09/ACbYJuRzwkFjrpo.jpg"></p><p>都说这种类型的题是最难的，我也有点惧怕，不过还是要迎难而上。</p><p>动态规划问题的一般形式就是求最值，求最值的核心就是穷举，暴力穷举会导致效率低下哎，所以我们需要一个备忘录来优化穷举过程。</p><p>而且，动态规划问题一定具备最优子结构，这样才能通过子问题的最值得到原问题的最值</p><p>动态规划三要素是重叠子问题（备忘录优化），最优子结构，状态转移方程，最难的一步就是构建出正确的状态转移方程。</p><p>动态规划采用自底向上的推理方法，从规模最小的一直推到规模最大的，所以动态规划一般都脱离了递归，采用循环迭代完成计算。</p><p>有了这些关于动态规划的了解后，我们来实战一下</p><h3 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h3><p>题目描述：给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">11</span>输出：<span class="token number">3</span> 解释：<span class="token number">11</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p><strong>示例 2：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token operator">-</span><span class="token number">1</span></code></pre><p><strong>示例 3：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">0</span>输出：<span class="token number">0</span></code></pre><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>求最值问题，又有最优子结构，可以立马想到动态规划。</p><p>最优子结构即子问题间必须相互独立，在该题中，比如我想求amount=11时的最少硬币数，假设有数值为1的硬币，其实就是在求amount=10的最少硬币数+1。由于硬币的数量是没有限制的，子问题之间没有相互制约，所以是相互独立的。</p><p>我们既然知道该题是动态规划的题了，那么就得认真思考一下它的状态转移方程了。</p><h4 id="状态转移方程三部曲"><a href="#状态转移方程三部曲" class="headerlink" title="状态转移方程三部曲"></a>状态转移方程三部曲</h4><h5 id="先确定状态"><a href="#先确定状态" class="headerlink" title="先确定状态"></a>先确定状态</h5><p>状态即变量，在该题中唯一的状态是目标金额amount</p><h5 id="确定dp函数定义"><a href="#确定dp函数定义" class="headerlink" title="确定dp函数定义"></a>确定dp函数定义</h5><p>函数dp(n)表示，当前的目标金额n，至少需要dp(n)个硬币凑出该金额</p><h5 id="确定选择并择优"><a href="#确定选择并择优" class="headerlink" title="确定选择并择优"></a>确定选择并择优</h5><p>对于每个状态，可以做出什么选择改变当前状态。在该题中，无论当前目标金额是多少，选择就是从coins中选一个硬币，然后将目标金额减去选择的硬币值。</p><p>好的，现在我们可以得到状态转移方程了</p><p><img src="https://s2.loli.net/2021/12/09/UOYrI7PzvlgLhKN.jpg"></p><h4 id="消除重叠子问题"><a href="#消除重叠子问题" class="headerlink" title="消除重叠子问题"></a>消除重叠子问题</h4><p>我们使用自底向上的dp table来消除重叠子问题，dp数组的定义与dp函数的定义类似</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>初始化一个长度为amount+1，每个元素初始值为amount+1的dp数组，因为组成amount的最大硬币数为amount(即全都是1的硬币数组成)，初始化为amount+1相当于正无穷，便于后续取最小值</p><p>将第0位元素赋值为1，便于后续最小值比对</p><p>遍历dp数组，每次相当于计算目标金额为i的最小硬币数</p><p>每次遍历都要从coins中选择硬币做为dp[i-coin]（即最优子结构）进行最小值比对</p><p>在选择硬币前还要判断子结构是否存在，即i&lt;coin是无效的</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> coin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> amount<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL到页面渲染数据这段时间内发生了啥事？聊聊域名系统</title>
      <link href="/2021/12/09/dns/"/>
      <url>/2021/12/09/dns/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/09/brsh17MXp3RQa65.jpg"></p><h3 id="DNS是个啥"><a href="#DNS是个啥" class="headerlink" title="DNS是个啥"></a>DNS是个啥</h3><ul><li>DNS(Domain Name System),顾名思义即域名系统，它被设计成一个联机分布式数据库系统，并采用客户服务器方式，主要职责是将互联网上的主机名字转为IP地址</li><li>域可以划分子域，形成多级域名，每个域名由标号序列组成，标号之间用’.’隔开，标号由英文和数字组成，不区分大小写，但有长度限制</li></ul><p><img src="https://s2.loli.net/2021/12/09/Hgupb5QkdJBEtaC.jpg"></p><ul><li>需要注意的是，DNS服务器的管辖范围是以区为单位进行管辖的，区&lt;=域，区是域的子集，一个区中的所有节点都是连通的，每个区都设置相应的权限域名服务器。</li><li>域名服务器按层次排列分别为，根域名服务器-&gt;顶级域名服务器-&gt;权限域名服务器</li></ul><p><img src="https://s2.loli.net/2021/12/09/OnqkYCjGpI3zcmV.jpg"></p><ul><li>还有一个特殊的本地域名服务器，它不属于域名服务器层次结构，当一台主机发出DNS查询请求时，这个请求就会发给本地域名服务器。</li><li>为了提高域名服务器的可靠性，通常会把数据复制到几个域名服务器中来保存，一个主域名服务器，其他为辅助域名服务器</li></ul><h3 id="解析URL哪部分？"><a href="#解析URL哪部分？" class="headerlink" title="解析URL哪部分？"></a>解析URL哪部分？</h3><ul><li>即代表主机的域名部分：<a href="http://www.example.com/">www.example.com</a></li><li>如果我输入的URL主机部分是IP地址的话，比如<a href="http://119.91.199.40/%EF%BC%8C%E6%8D%95%E6%8D%89%E7%BC%93%E5%AD%98%EF%BC%8C%E6%8D%95%E8%8E%B7%E4%B8%8D%E5%88%B0%E4%BE%BF%E8%B7%B3%E8%BF%87%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%AD%A5%E9%AA%A4%E7%9B%B4%E6%8E%A5%E4%B8%8E%E7%9B%AE%E7%9A%84%E4%B8%BB%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%AD%A5%E9%AA%A4">http://119.91.199.40/，捕捉缓存，捕获不到便跳过域名解析步骤直接与目的主机进行建立TCP连接的步骤</a></li></ul><h3 id="怎么解析的"><a href="#怎么解析的" class="headerlink" title="怎么解析的"></a>怎么解析的</h3><p>了解了DNS是个啥，也知道它对URL哪部分进行操作，那我们就正式开始看看它是怎么把一个域名解析成IP地址的</p><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ul><li>当应用进程需要把主机名解析成IP地址时，该应用进程就调用解析程序，并成为DNS的一个客户，把带解析的域名放在DNS请求报文中，为了减少开销会以UDP用户数据报方式发给本地域名服务器，采用递归查询。</li><li>本地域名服务器在查找域名后，若找到，则把对应的IP地址放在响应报文中返回，应用进程拿到IP地址即可建立连接进行通信</li><li>若本地域名服务器不能回答该请求，则本地域名服务器就暂时成为DNS中另一个客户，并向其他域名服务器发出查询请求，直到找到或者是报错为止。</li></ul><p>本地域名服务器向根服务器的查询通常都是迭代查询，也可以是递归查询</p><p>迭代查询示意图</p><p><img src="https://s2.loli.net/2021/12/09/TQivB5GRAFDaM2p.jpg"></p><p>递归查询示意图</p><p><img src="https://s2.loli.net/2021/12/09/QJ2vfWhM1dZAL7j.jpg"></p><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>我们访问网址肯定是想响应越快越好，为了优化DNS查询效率，并减轻根域名服务器的负荷和减少互联网上的DNS查询报文数量，在域名服务器中广泛使用了高速缓存。</p><p>高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录，查询时发现若有记录便直接向最近的步骤进行，而不用一步一步发送请求了。</p><p>域名服务器为了提高域名转换的准确性，需要给每一项记录设置一个失效时间值。</p><p>主机中也有高速缓存，每次我们查询时先从浏览器缓存中找，然后在主机缓存中找，最后才使用域名服务器</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>我们上面所说的是DNS的正向查询过程，即根据域名查询IP地址，但DNS还有反向查询的功能</p><p>反向查询即根据IP查询域名，主要应用到邮件服务器中来阻拦垃圾邮件确，保适当的邮件交换记录是生效的。。</p><p>由于在域名系统中，一个IP地址可以对应多个域名，从IP出发区找域名理论上需要遍历整颗域名树才能有正确完整的结果。但这很不现实，所以DNS域名系统提供了一个逆向解析域in-addr.arpa </p><p>例如一个IP地址：222.211.233.244，其逆向域名表达方式为：244.233.221.222.in-addr.arpa </p><p>实质上逆向域名解析是将IP地址表达成一个域名,以地址做为索引的域名空间,这样逆向解析的很大部分可以纳入正向解析中。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解vue3的新特性了吗？聊聊组合式API</title>
      <link href="/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/"/>
      <url>/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/482a885c45a5de21.jpg"></p><h3 id="为什么会出现，解决了啥痛点？"><a href="#为什么会出现，解决了啥痛点？" class="headerlink" title="为什么会出现，解决了啥痛点？"></a>为什么会出现，解决了啥痛点？</h3><p>​    新特性的出现肯定是为了解决和优化以往设计中的某个痛点，组合式API也一样。</p><p>​    我们都知道，代码的可重用性会增强我们应用的可维护性和灵活性，所以几乎每个前端语言框架都有组件化开发的思想，vue也不例外。</p><p>​    依据vue2的设计思想，使用 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组件选项来组织逻辑通常都很有效，但当一个组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长，这会导致组件难以阅读和理解，就像下面这样</p><ul><li><img src="https://v3.cn.vuejs.org/images/options-api.png"></li></ul><p>​    </p><ul><li>这种碎片化使得理解和维护复杂组件变得困难，选项的分离掩盖了潜在的逻辑问题，在处理单个逻辑关注点的时候得不断跳转相关代码选项块</li><li>为了能够将同一个逻辑关注点相关代码收集在一起，组合式API应运而生。</li></ul><h3 id="怎么使用组合式API"><a href="#怎么使用组合式API" class="headerlink" title="怎么使用组合式API"></a>怎么使用组合式API</h3><p>​    知道了它是怎么来的，我们还得学会怎么去使用</p><p>​    vue3是通过setup组件选项去使用组合式API的</p><h4 id="setup调用时间"><a href="#setup调用时间" class="headerlink" title="setup调用时间"></a>setup调用时间</h4><ul><li><code>setup</code> 的调用发生在 <code>data</code> property、<code>computed</code> property 或 <code>methods</code> 被解析之前，所以它们无法在 <code>setup</code> 中被获取。</li><li>执行setup时，组件实例尚未被创建，所以this在setup中无效，因为它不会找到组件实例。</li><li>setup位于生命周期图顶部</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，<code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 这里返回的任何内容都可以用于组件的其余部分</span><span class="token punctuation">&#125;</span></code></pre><h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><ul><li><p>需要注意的是，props是响应式的，即传入新的prop时，它将被更新，所以不能对props使用ES6结构，这样会消除props的响应性。需要解构可以在 <code>setup</code> 函数中使用 <a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%84"><code>toRefs</code></a> 函数来完成</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>如果 <code>title</code> 是可选的 prop，则传入的 <code>props</code> 中可能没有 <code>title</code>。在这种情况下，<code>toRefs</code> 将不会为 <code>title</code> 创建一个 ref 。你需要使用 <code>toRef</code> 替代它：</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><ul><li><p><code>context</code> 是一个普通的 JavaScript 对象，它不是响应式的，可以安全地对 <code>context</code> 使用 ES6 解构。</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>attrs</code> 和 <code>slots</code> 是有状态的对象，它们总是会随组件本身的更新而更新。注意，是组件本身！这意味着我们应该避免对attrs和slots进行解构，并始终以attrs.x的形式去使用property,但由于property是非响应式的，如果想通过attrs的更改去做事情，我们应该要在<code>onBeforeUpdate</code> 生命周期钩子执行操作</p></li><li><p>我们需要知道attrs,slots,emit，expose都是些啥</p></li></ul><h6 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Child @testAttrsItem<span class="token operator">=</span><span class="token string">"testAttrsItem"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 其实就是父组件传递的函数集合</span></code></pre><h6 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>TestSlots <span class="token operator">></span>     <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>testSlot1<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>         我是插槽<span class="token number">1</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>testSlot2<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>         我是插槽<span class="token number">2</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>TestSlots<span class="token operator">></span> <span class="token comment">// 其实就是插槽的集合</span></code></pre><h6 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">emitFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是抛出去的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">clickEmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"emitFun"</span><span class="token punctuation">,</span> <span class="token string">"param1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      clickEmit    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickEmit"</span><span class="token operator">></span>点击抛出<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">const</span> <span class="token function-variable function">monitorChildEmitFun</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>TestEmit @emitFun<span class="token operator">=</span><span class="token string">"monitorChildEmitFun"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h6 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h6><ul><li>expose函数接受一个对象参数，其中定义的property将可以被外部组件实例访问，未在其中定义变量将在父组件中访问不到</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">++</span>count<span class="token punctuation">.</span>value    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      increment    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">const</span> child<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  child<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>TestExpose ref<span class="token operator">=</span><span class="token string">"child"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><ul><li>setup返回的对象中的property以及传递给setup的props属性可以在模板中访问的到</li><li>但需要注意的是，从 <code>setup</code> 返回的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">refs</a> 在模板中访问时是<a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#ref-%E8%A7%A3%E5%8C%85">被自动浅解包</a>的，因此不应在模板中使用 <code>.value</code>。</li></ul><h4 id="使用渲染函数"><a href="#使用渲染函数" class="headerlink" title="使用渲染函数"></a>使用渲染函数</h4><ul><li><p>setup可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> readersNumber <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"Vue 3 Guide"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 请注意这里我们需要显式使用 ref 的 value</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>readersNumber<span class="token punctuation">.</span>value<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 父组件直接照常引入该组件进行渲染</span> <span class="token comment">// h本质上是createElement函数的别名</span></code></pre></li><li><p>返回一个渲染函数将阻止我们返回任何其它的东西，如果我们想要将这个组件的方法通过模板ref暴露给父组件就不能了，我们可以通过expose方法解决这个问题</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天学学回溯算法</title>
      <link href="/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/7581fb79a32cfe75.jpg"></p><h4 id="什么是决策树"><a href="#什么是决策树" class="headerlink" title="什么是决策树"></a>什么是决策树</h4><p>​ 在学习回溯算法前我们需要去了解一下什么是决策树，官方解释太繁琐，大概翻译成这样：</p><ul><li>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/ec140a7328539dcc.png"></li></ul><h4 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h4><p>​ 了解了决策树之后，会发现所谓回溯算法的问题其实就是决策树的遍历问题。</p><p>​ 我们需要考虑三个问题</p><ul><li>路径：当前已经做出的选择（走过的,总体相当于全排列）</li><li>选择列表：当前可以往下走的选择（未走过，可以走的）</li><li>结束条件：到决策树的底层后无法再做出选择</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/8bb74e69ce6d48ce.png"></li></ul><p>​ 看看框架长啥样</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>def <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token operator">:</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token operator">:</span>        #做选择        将该选择从选择列表移除    路径<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择        #路径<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span>    将该选择再加入选择列表</code></pre><h4 id="实战一下，解决-N-皇后问题"><a href="#实战一下，解决-N-皇后问题" class="headerlink" title="实战一下，解决 N 皇后问题"></a>实战一下，解决 N 皇后问题</h4><p>​ 题目描述：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击，皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。根据输入的行数返回所有可行的放置方法。</p><p><img src="https://s3.bmp.ovh/imgs/2021/12/309f795e0f82cfe3.png"></p><p>​ 问题本质： 其实就是跟全排列差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p><p>​ 解题思路：</p><ul><li>建一个 res 数组用于返回，建一个临时数组 temp 存放某种可行放置方法</li><li>初始化 temp,每个元素以’.’填充</li><li>套用框架，建立回溯函数 backtrack</li><li>backtrack 函数信息<ul><li>默认小于当前行 row 的其他行已经成功放置了皇后</li><li>选择列表为当前行的所有列</li><li>结束条件是当前行超过题目输入的行数，满足结束条件说明该放置方法可行，将其加入 res 结果数组，这里会遇到深拷贝，浅拷贝的问题</li><li>在根据选择列表做选择前需要判定该项是否合法</li></ul></li><li>建立判定合法函数 isValid 进行判定<ul><li>先判断当前列有没有放置皇后互相冲突</li><li>然后分别检查右上方和左上方</li></ul></li></ul><p>​ 代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">solveNQueens</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traceBack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">traceBack</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> item<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        temp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>        <span class="token function">traceBack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">temp<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><h4 id="深拷贝浅拷贝的疑惑"><a href="#深拷贝浅拷贝的疑惑" class="headerlink" title="深拷贝浅拷贝的疑惑"></a>深拷贝浅拷贝的疑惑</h4><ul><li><p>在往 res 添加可行解数组时，如果直接添加 temp 变量，后续 temp 改变会导致之前添加过的全部同步更新为 temp 当前值，因为 temp 变量只是数组实际存储在堆空间的地址引用值而已。</p></li><li><p>但疑惑的是，我通过新建一个临时变量 item 去利用一些深拷贝的方法将 temp 数组拷贝到 item，res 再添加 item，都失效了，还是会同步更新</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> item<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> item<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token operator">...</span>item<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token comment">// 以上三种方法都失效了，所以用了最笨的 for 循环挨个赋值</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
