<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>今天学学回溯算法</title>
      <link href="/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/7581fb79a32cfe75.jpg"></p><h4 id="什么是决策树"><a href="#什么是决策树" class="headerlink" title="什么是决策树"></a>什么是决策树</h4><p>​    在学习回溯算法前我们需要去了解一下什么是决策树，官方解释太繁琐，大概翻译成这样：</p><ul><li>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/ec140a7328539dcc.png"></li></ul><h4 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h4><p>​    了解了决策树之后，会发现所谓回溯算法的问题其实就是决策树的遍历问题。</p><p>​    我们需要考虑三个问题</p><ul><li>路径：当前已经做出的选择（走过的,总体相当于全排列）</li><li>选择列表：当前可以往下走的选择（未走过，可以走的）</li><li>结束条件：到决策树的底层后无法再做出选择</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/8bb74e69ce6d48ce.png"></li></ul><p>​    看看框架长啥样</p><ul><li>```<br>result = []<br>def backtrack(路径, 选择列表):<pre><code>if 满足结束条件:    result.add(路径)    returnfor 选择 in 选择列表:    #做选择    将该选择从选择列表移除    路径.add(选择)    backtrack(路径, 选择列表)    撤销选择    #路径.remove(选择)    将该选择再加入选择列表</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 实战一下，解决N皇后问题</span><br><span class="line"></span><br><span class="line">​[力扣](https://leetcode-cn.com/problems/n-queens/submissions/)</span><br><span class="line"></span><br><span class="line">​题目描述：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击，皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。根据输入的行数返回所有可行的放置方法。</span><br><span class="line"></span><br><span class="line">![](https://s3.bmp.ovh/imgs/2021/12/309f795e0f82cfe3.png)</span><br><span class="line"></span><br><span class="line">​问题本质： 其实就是跟全排列差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</span><br><span class="line"></span><br><span class="line">​解题思路：</span><br><span class="line"></span><br><span class="line">+ 建一个res数组用于返回，建一个临时数组temp存放某种可行放置方法</span><br><span class="line">+ 初始化temp,每个元素以&#x27;.&#x27;填充</span><br><span class="line">+ 套用框架，建立回溯函数backtrack</span><br><span class="line">+ backtrack函数信息</span><br><span class="line">  + 默认小于当前行row的其他行已经成功放置了皇后</span><br><span class="line">  + 选择列表为当前行的所有列</span><br><span class="line">  + 结束条件是当前行超过题目输入的行数，满足结束条件说明该放置方法可行，将其加入res结果数组，这里会遇到深拷贝，浅拷贝的问题</span><br><span class="line">  + 在根据选择列表做选择前需要判定该项是否合法</span><br><span class="line">+ 建立判定合法函数isValid进行判定</span><br><span class="line">  + 先判断当前列有没有放置皇后互相冲突</span><br><span class="line">  + 然后分别检查右上方和左上方</span><br><span class="line"></span><br><span class="line">​    代码</span><br><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  /**</span><br><span class="line">   * @param &#123;number&#125; n</span><br><span class="line">   * @return &#123;string[][]&#125;</span><br><span class="line">   */</span><br><span class="line">  var solveNQueens = function (n) &#123;</span><br><span class="line">      let res = []</span><br><span class="line">      let temp = []</span><br><span class="line">      for (let i = 0; i &lt; n; i++) &#123;</span><br><span class="line">          temp.push(Array(n).fill(&#x27;.&#x27;))</span><br><span class="line">      &#125;</span><br><span class="line">      traceBack(res,temp, 0)</span><br><span class="line">      return res</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function traceBack(res,temp, row) &#123;</span><br><span class="line">    let n = temp[0].length</span><br><span class="line">    if (row == n) &#123;</span><br><span class="line">        let item=[]</span><br><span class="line">        for(let i=0;i&lt;n;i++)&#123;</span><br><span class="line">            let t=[]</span><br><span class="line">            for(let j=0;j&lt;n;j++)&#123;</span><br><span class="line">                t.push(temp[i][j])</span><br><span class="line">            &#125;</span><br><span class="line">            item.push(t.join(&quot;&quot;))</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(item)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    for (let col = 0; col &lt; n; col++) &#123;</span><br><span class="line">        if (!isValid(temp, row, col)) &#123;</span><br><span class="line">            continue</span><br><span class="line">        &#125;</span><br><span class="line">        temp[row][col] = &#x27;Q&#x27;</span><br><span class="line">        traceBack(res,temp, row + 1)</span><br><span class="line">        temp[row][col] = &#x27;.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function isValid(temp, row, col) &#123;</span><br><span class="line">    let n = temp[0].length</span><br><span class="line">    for (let i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (temp[i][col] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = row - 1, j = col + 1; i &gt;= 0 &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">        if (temp[i][j] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = row - 1, j = col - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) &#123;</span><br><span class="line">        if (temp[i][j] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="深拷贝浅拷贝的疑惑"><a href="#深拷贝浅拷贝的疑惑" class="headerlink" title="深拷贝浅拷贝的疑惑"></a>深拷贝浅拷贝的疑惑</h4><ul><li><p>在往res添加可行解数组时，如果直接添加temp变量，后续temp改变会导致之前添加过的全部同步更新为temp当前值，因为temp变量只是数组实际存储在堆空间的地址引用值而已。</p></li><li><p>但疑惑的是，我通过新建一个临时变量item去利用一些深拷贝的方法将temp数组拷贝到item，res再添加item，都失效了，还是会同步更新</p><ul><li><pre><code>let item=temp.slice(0)let item=temp.concat()let [...item]=temp// 以上三种方法都失效了，所以用了最笨的for循环挨个赋值</code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2021/12/07/My-New-Post/"/>
      <url>/2021/12/07/My-New-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="我是测试的文章"><a href="#我是测试的文章" class="headerlink" title="我是测试的文章"></a>我是测试的文章</h2>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/07/hello-world/"/>
      <url>/2021/12/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
