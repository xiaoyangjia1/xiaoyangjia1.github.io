<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你真的了解vue3的新特性了吗？聊聊组合式API</title>
      <link href="/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/"/>
      <url>/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/482a885c45a5de21.jpg"></p><h3 id="为什么会出现，解决了啥痛点？"><a href="#为什么会出现，解决了啥痛点？" class="headerlink" title="为什么会出现，解决了啥痛点？"></a>为什么会出现，解决了啥痛点？</h3><p>​    新特性的出现肯定是为了解决和优化以往设计中的某个痛点，组合式API也一样。</p><p>​    我们都知道，代码的可重用性会增强我们应用的可维护性和灵活性，所以几乎每个前端语言框架都有组件化开发的思想，vue也不例外。</p><p>​    依据vue2的设计思想，使用 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组件选项来组织逻辑通常都很有效，但当一个组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长，这会导致组件难以阅读和理解，就像下面这样</p><ul><li><img src="https://v3.cn.vuejs.org/images/options-api.png"></li></ul><p>​    </p><ul><li>这种碎片化使得理解和维护复杂组件变得困难，选项的分离掩盖了潜在的逻辑问题，在处理单个逻辑关注点的时候得不断跳转相关代码选项块</li><li>为了能够将同一个逻辑关注点相关代码收集在一起，组合式API应运而生。</li></ul><h3 id="怎么使用组合式API"><a href="#怎么使用组合式API" class="headerlink" title="怎么使用组合式API"></a>怎么使用组合式API</h3><p>​    知道了它是怎么来的，我们还得学会怎么去使用</p><p>​    vue3是通过setup组件选项去使用组合式API的</p><h4 id="setup调用时间"><a href="#setup调用时间" class="headerlink" title="setup调用时间"></a>setup调用时间</h4><ul><li><code>setup</code> 的调用发生在 <code>data</code> property、<code>computed</code> property 或 <code>methods</code> 被解析之前，所以它们无法在 <code>setup</code> 中被获取。</li><li>执行setup时，组件实例尚未被创建，所以this在setup中无效，因为它不会找到组件实例。</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，<code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setup(props,context) &#123;</span><br><span class="line">    return &#123;&#125; // 这里返回的任何内容都可以用于组件的其余部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><ul><li><p>需要注意的是，props是响应式的，即传入新的prop时，它将被更新，所以不能对props使用ES6结构，这样会消除props的响应性。需要解构可以在 <code>setup</code> 函数中使用 <a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%84"><code>toRefs</code></a> 函数来完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">setup(props) &#123;</span><br><span class="line">  const &#123; title &#125; = toRefs(props)</span><br><span class="line">  console.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>title</code> 是可选的 prop，则传入的 <code>props</code> 中可能没有 <code>title</code>。在这种情况下，<code>toRefs</code> 将不会为 <code>title</code> 创建一个 ref 。你需要使用 <code>toRef</code> 替代它：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; toRef &#125; from &#x27;vue&#x27;</span><br><span class="line">setup(props) &#123;</span><br><span class="line">  const title = toRef(props, &#x27;title&#x27;)</span><br><span class="line">  console.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><ul><li><p><code>context</code> 是一个普通的 JavaScript 对象，它不是响应式的，可以安全地对 <code>context</code> 使用 ES6 解构。</p><ul><li>```<br>export default {<br>  setup(props, { attrs, slots, emit, expose }) {<pre><code>...</code></pre>  }<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ `attrs` 和 `slots` 是有状态的对象，它们总是会随组件本身的更新而更新。注意，是组件本身！这意味着我们应该避免对attrs和slots进行解构，并始终以attrs.x的形式去使用property,但由于property是非响应式的，如果想通过attrs的更改去做事情，我们应该要在`onBeforeUpdate` 生命周期钩子执行操作</span><br><span class="line"></span><br><span class="line">+ 我们需要知道attrs,slots,emit，expose都是些啥</span><br><span class="line"></span><br><span class="line">###### attrs</span><br><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  &lt;Child @testAttrsItem=&quot;testAttrsItem&quot; /&gt;</span><br><span class="line">  // 其实就是父组件传递的函数集合</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h6><ul><li><p>```</p> <TestSlots >      <template v-slot:testSlot1>        <div>          我是插槽1        </div>      </template>       <template v-slot:testSlot2>        <div>          我是插槽2        </div>      </template>  </TestSlots>  // 其实就是插槽的集合<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### emit</span><br><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  // 子组件</span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">      const emitFun = () =&gt; &#123;</span><br><span class="line">        console.log(&quot;我是抛出去的函数&quot;);</span><br><span class="line">      &#125;;</span><br><span class="line">      const clickEmit = () =&gt; &#123;</span><br><span class="line">        emit(&quot;emitFun&quot;, &quot;param1&quot;);</span><br><span class="line">      &#125;;</span><br><span class="line">      return &#123;</span><br><span class="line">        clickEmit</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;clickEmit&quot;&gt;点击抛出&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>```<br>// 父组件<br>const monitorChildEmitFun=(param: string)=&gt;{<br>  console.log(param)<br>}</p><p> &lt;TestEmit @emitFun=”monitorChildEmitFun” /&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 模板</span><br><span class="line"></span><br><span class="line">+ setup返回的对象中的property以及传递给setup的props属性可以在模板中访问的到</span><br><span class="line">+ 但需要注意的是，从 `setup` 返回的 [refs](https://v3.cn.vuejs.org/api/refs-api.html#ref) 在模板中访问时是[被自动浅解包](https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#ref-解包)的，因此不应在模板中使用 `.value`。</span><br><span class="line"></span><br><span class="line">#### 使用渲染函数</span><br><span class="line"></span><br><span class="line">+ setup可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态</span><br><span class="line"></span><br><span class="line">  + ```</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">       const readersNumber = ref(0);</span><br><span class="line">       const book = reactive(&#123; title: &quot;Vue 3 Guide&quot; &#125;);</span><br><span class="line">       // 请注意这里我们需要显式使用 ref 的 value</span><br><span class="line">       return () =&gt; h(&quot;div&quot;, [readersNumber.value, book.title]);</span><br><span class="line">     &#125;,</span><br><span class="line">     // 父组件直接照常引入该组件进行渲染</span><br><span class="line">     // h本质上是createElement函数的别名</span><br></pre></td></tr></table></figure></li><li><p>返回一个渲染函数将阻止我们返回任何其它的东西，如果我们想要将这个组件的方法通过模板ref暴露给父组件就不能了，我们可以通过expose方法解决这个问题</p></li></ul><h6 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h6><ul><li><p>expose函数接受一个对象参数，其中定义的property将可以被外部组件实例访问，未在其中定义变量将在父组件中访问不到</p></li><li><p>```<br>// 子组件<br>setup(props, { expose }) {</p><pre><code>const count = ref(0)const increment = () =&gt; ++count.valueexpose(&#123;  increment&#125;)return () =&gt; h(&#39;div&#39;, count.value)</code></pre><p>  }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```</span><br><span class="line">  // 父组件</span><br><span class="line">  const child=ref(null)</span><br><span class="line">  const handleClick=()=&gt;&#123;</span><br><span class="line">    console.log(child.value)</span><br><span class="line">    child.value.increment()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   &lt;button @click=&quot;handleClick&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">   &lt;TestExpose ref=&quot;child&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天学学回溯算法</title>
      <link href="/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/7581fb79a32cfe75.jpg"></p><h4 id="什么是决策树"><a href="#什么是决策树" class="headerlink" title="什么是决策树"></a>什么是决策树</h4><p>​ 在学习回溯算法前我们需要去了解一下什么是决策树，官方解释太繁琐，大概翻译成这样：</p><ul><li>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/ec140a7328539dcc.png"></li></ul><h4 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h4><p>​ 了解了决策树之后，会发现所谓回溯算法的问题其实就是决策树的遍历问题。</p><p>​ 我们需要考虑三个问题</p><ul><li>路径：当前已经做出的选择（走过的,总体相当于全排列）</li><li>选择列表：当前可以往下走的选择（未走过，可以走的）</li><li>结束条件：到决策树的底层后无法再做出选择</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/8bb74e69ce6d48ce.png"></li></ul><p>​ 看看框架长啥样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">result = []</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        #做选择</span><br><span class="line">        将该选择从选择列表移除</span><br><span class="line">    路径.add(选择)</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br><span class="line">        #路径.remove(选择)</span><br><span class="line">    将该选择再加入选择列表</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实战一下，解决-N-皇后问题"><a href="#实战一下，解决-N-皇后问题" class="headerlink" title="实战一下，解决 N 皇后问题"></a>实战一下，解决 N 皇后问题</h4><p>​ 题目描述：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击，皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。根据输入的行数返回所有可行的放置方法。</p><p><img src="https://s3.bmp.ovh/imgs/2021/12/309f795e0f82cfe3.png"></p><p>​ 问题本质： 其实就是跟全排列差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p><p>​ 解题思路：</p><ul><li>建一个 res 数组用于返回，建一个临时数组 temp 存放某种可行放置方法</li><li>初始化 temp,每个元素以’.’填充</li><li>套用框架，建立回溯函数 backtrack</li><li>backtrack 函数信息<ul><li>默认小于当前行 row 的其他行已经成功放置了皇后</li><li>选择列表为当前行的所有列</li><li>结束条件是当前行超过题目输入的行数，满足结束条件说明该放置方法可行，将其加入 res 结果数组，这里会遇到深拷贝，浅拷贝的问题</li><li>在根据选择列表做选择前需要判定该项是否合法</li></ul></li><li>建立判定合法函数 isValid 进行判定<ul><li>先判断当前列有没有放置皇后互相冲突</li><li>然后分别检查右上方和左上方</li></ul></li></ul><p>​ 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var solveNQueens = function (n) &#123;</span><br><span class="line">    let res = []</span><br><span class="line">    let temp = []</span><br><span class="line">    for (let i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        temp.push(Array(n).fill(&#x27;.&#x27;))</span><br><span class="line">    &#125;</span><br><span class="line">    traceBack(res,temp, 0)</span><br><span class="line">    return res</span><br><span class="line">&#125;;</span><br><span class="line">function traceBack(res,temp, row) &#123;</span><br><span class="line">    let n = temp[0].length</span><br><span class="line">    if (row == n) &#123;</span><br><span class="line">        let item=[]</span><br><span class="line">        for(let i=0;i&lt;n;i++)&#123;</span><br><span class="line">            let t=[]</span><br><span class="line">            for(let j=0;j&lt;n;j++)&#123;</span><br><span class="line">                t.push(temp[i][j])</span><br><span class="line">            &#125;</span><br><span class="line">            item.push(t.join(&quot;&quot;))</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(item)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    for (let col = 0; col &lt; n; col++) &#123;</span><br><span class="line">        if (!isValid(temp, row, col)) &#123;</span><br><span class="line">            continue</span><br><span class="line">        &#125;</span><br><span class="line">        temp[row][col] = &#x27;Q&#x27;</span><br><span class="line">        traceBack(res,temp, row + 1)</span><br><span class="line">        temp[row][col] = &#x27;.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function isValid(temp, row, col) &#123;</span><br><span class="line">    let n = temp[0].length</span><br><span class="line">    for (let i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (temp[i][col] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = row - 1, j = col + 1; i &gt;= 0 &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">        if (temp[i][j] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = row - 1, j = col - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) &#123;</span><br><span class="line">        if (temp[i][j] == &#x27;Q&#x27;) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深拷贝浅拷贝的疑惑"><a href="#深拷贝浅拷贝的疑惑" class="headerlink" title="深拷贝浅拷贝的疑惑"></a>深拷贝浅拷贝的疑惑</h4><ul><li><p>在往 res 添加可行解数组时，如果直接添加 temp 变量，后续 temp 改变会导致之前添加过的全部同步更新为 temp 当前值，因为 temp 变量只是数组实际存储在堆空间的地址引用值而已。</p></li><li><p>但疑惑的是，我通过新建一个临时变量 item 去利用一些深拷贝的方法将 temp 数组拷贝到 item，res 再添加 item，都失效了，还是会同步更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let item=temp.slice(0)</span><br><span class="line">let item=temp.concat()</span><br><span class="line">let [...item]=temp</span><br><span class="line">// 以上三种方法都失效了，所以用了最笨的 for 循环挨个赋值</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
