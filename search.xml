<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello啊 Worker</title>
      <link href="/2021/12/27/Hello%E5%95%8A-Worker/"/>
      <url>/2021/12/27/Hello%E5%95%8A-Worker/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/27/OXe4v3YT1fxFsR9.jpg" alt="微信图片_20211227195211.jpg"></p><p>我们总说JS是单线程的，根据上一文我们也了解了JS引擎线程.</p><p>单线程意味着不能把工作委托给独立的线程或进程去做。JS的单线程可以保证它与不同的浏览器API兼容。如果JS可以多线程执行并发更改，那么像DOM这样的API就会出现问题。</p><p>这正是我们本文讨论的工作者线程的价值所在：允许把主线程的工作转嫁给独立的实体，而不会改变现有的单线程模型。</p><h2 id="工作者线程简介"><a href="#工作者线程简介" class="headerlink" title="工作者线程简介"></a>工作者线程简介</h2><p>JS环境实际上托管在操作系统中的虚拟环境。使用工作者线程，浏览器可以在原始界面环境之外再分配一个完全独立的二级子环境。</p><p>这个子环境不能与依赖单线程交互的API（如DOM）互操作，但可以与父环境并行执行代码</p><h3 id="工作者线程与线程"><a href="#工作者线程与线程" class="headerlink" title="工作者线程与线程"></a>工作者线程与线程</h3><ul><li>工作者线程是以实际线程实现的</li><li>工作者线程并行执行但不一定再同一个进程里</li><li>工作者线程可以共享某些内存，但不共享全部内存</li><li>创建工作者线程的开销更大</li></ul><h3 id="工作者线程类型"><a href="#工作者线程类型" class="headerlink" title="工作者线程类型"></a>工作者线程类型</h3><p>web工作者线程规范中定义了三种主要的工作者线程：专用工作者线程、共享工作者线程、服务工作者线程</p><h4 id="专用工作者线程"><a href="#专用工作者线程" class="headerlink" title="专用工作者线程"></a>专用工作者线程</h4><p>通常简称为工作者线程、Web Worker或Worker.只能被创建它的页面使用</p><h4 id="共享工作者线程"><a href="#共享工作者线程" class="headerlink" title="共享工作者线程"></a>共享工作者线程</h4><p>共享工作者线程可以被多个不同的上下文使用，包括不同的页面。任何与创建共享工作者线程的脚本同源的脚本，都可以向共享工作者线程发送给消息或从中接受消息</p><h4 id="服务工作者线程"><a href="#服务工作者线程" class="headerlink" title="服务工作者线程"></a>服务工作者线程</h4><p>主要用途是拦截、重定向和修改页面发出的请求，充当网络请求仲裁者的角色。</p><h3 id="WorkerGlobalScope"><a href="#WorkerGlobalScope" class="headerlink" title="WorkerGlobalScope"></a>WorkerGlobalScope</h3><p>在网页中，window对象可以向运行在其中的脚本暴露各种全局属性。在工作者线程内部，没有window的概念。这里的全局对象是WorkerGlobalScope的实例，通过self关键字暴露出来。</p><h4 id="WorkerGlobalScope属性和方法"><a href="#WorkerGlobalScope属性和方法" class="headerlink" title="WorkerGlobalScope属性和方法"></a>WorkerGlobalScope属性和方法</h4><p>self上可用的属性和方法是window对象上属性的严格子集。其中有些属性或方法会返回特定于工作者线程的版本。</p><h4 id="WorkerGlobalScope的子类"><a href="#WorkerGlobalScope的子类" class="headerlink" title="WorkerGlobalScope的子类"></a>WorkerGlobalScope的子类</h4><p>每种类型的工作者线程都使用了自己特定的全局对象，继承关系如下</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget">EventTarget</a>-&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WorkerGlobalScope">WorkerGlobalScope</a>-&gt;子类</p><ul><li>专用工作者线程使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope">DedicatedWorkerGlobalScope</a></li><li>共享工作者线程使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope">SharedWorkerGlobalScope</a></li><li>服务工作者线程使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope">ServiceWorkerGlobalScope</a></li></ul><p><code>self</code> 属性返回每个内容的专门 scope .</p><h2 id="专用工作者线程-1"><a href="#专用工作者线程-1" class="headerlink" title="专用工作者线程"></a>专用工作者线程</h2><p>这样的线程可以与父页面进行交换信息、发送网络请求、执行文件输入/输出、进行密集计算、处理大量数据，以及实现是其他不适合在页面执行线程的任务（防止阻塞页面的渲染）</p><p>使用工作者线程时，脚本在哪里执行，在哪里加载是非常重要的概念。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>可以称专用者线程为后台脚本。JS线程的各个方面，包括生命周期管理、代码路径和输入输出，都由初始化线程时提供的脚本来控制。</p><h4 id="创建工作者线程"><a href="#创建工作者线程" class="headerlink" title="创建工作者线程"></a>创建工作者线程</h4><p>最常见的方式是加载JS文件。将文件路径提供给Worker构造函数，然后构造函数再在后台异步加载并实例化工作者线程。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>aURL<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>假设在main.js文件中创建工作者线程，加载worker.js文件</p><p>worker文件是在后台加载的，工作者线程的初始化完全独立于main.js</p><p>工作者线程本身存在于独立的JavaScript环境中，因此main.js必须以Worker对象为代理实现与工作者线程通信。</p><h4 id="安全限制"><a href="#安全限制" class="headerlink" title="安全限制"></a>安全限制</h4><p>工作者线程的脚本必须遵守同源策略</p><h4 id="使用Worker对象"><a href="#使用Worker对象" class="headerlink" title="使用Worker对象"></a>使用Worker对象</h4><p>Worker对象是与刚创建的专用工作者线程通信的连接点。它可用于在工作者线程和父上下文间传递信息，以及捕获专用工作者线程发出的事件。</p><p>在终止工作者线程之前，Worker对象不会被垃圾回收，也不能通过编程的方式恢复对之前Worker对象的引用。</p><h4 id="DedicatedWorkerGlobalScope"><a href="#DedicatedWorkerGlobalScope" class="headerlink" title="DedicatedWorkerGlobalScope"></a>DedicatedWorkerGlobalScope</h4><p>在专用工作者内部，全局作用域是DedicatedWorkerGlobalScope的实例，工作者线程通过self关键字访问该全局作用域。</p><p>因为工作者线程具有不可忽略的启动延迟，所以即使Worker对象存在，工作者线程的日志也会在主线程的日志之后打印出来</p><h3 id="隐式MessagePorts"><a href="#隐式MessagePorts" class="headerlink" title="隐式MessagePorts"></a>隐式MessagePorts</h3><p>专用工作者线程隐式使用了Message在两个上下文之间通信</p><p>在工作者线程内部调用close()(或在外部调用terminate())不仅会关闭MessagePort,也会终止线程</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>专用工作者线程可以区分为下列三个状态：初始化、活动和终止。</p><p>无法通过Worker对象确定工作者线程当前是处理初始化、活动还是终止状态。</p><h4 id="内部终止"><a href="#内部终止" class="headerlink" title="内部终止"></a>内部终止</h4><p>调用close()后，工作者线程的执行并没有立即停止，close()会通知工作者线程取消事件循环中的所有任务，并阻止立即添加新任务。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> workerScript <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">self.postMessage('foo')self.close()self.postMessage('bar')setTimeOut(()=>self.postMessage('baz'),0)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> workerScriptBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>workerScript<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> workerScriptBlobUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>workerScriptBlob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>workerScriptBlobUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Worker</span><span class="token comment">// foo</span><span class="token comment">// bar</span></code></pre><p>因为延迟的问题所以先打印Worker对象，</p><p>注意：在这里工作者线程不执行同步停止，所以bar也被打印出来</p><p>因为有些浏览器不支持本地通过文件路径形式创建工作者线程，所以本文均采用行内创建的方式做例</p><h4 id="外部终止"><a href="#外部终止" class="headerlink" title="外部终止"></a>外部终止</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> workerScript <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">self.onmessage=(&#123;data&#125;) =>console.log(data)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> workerScriptBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>workerScript<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> workerScriptBlobUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>workerScriptBlob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>workerScriptBlobUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Worker对象</span><span class="token comment">// foo</span></code></pre><p>一旦调用terminate(),工作者线程的消息队列就会被清理并锁住，这也是只打印foo的原因</p><p>close()和terminate()这两个方法是幂等操作，仅仅是将Worker标记为teardown,因此多次调用不会有不好的影响。</p><p>在整个生命周期中，一个专用工作者线程只会关联一个网页（文档）。除非明确终止，否则只要关联文档存在，专用者线程就会存在。</p><p>如果浏览器离开网页（通过导航关闭标签页，或关闭窗口），它会将与其关联的工作者线程标记为终止，它们的执行也会停止。</p><h3 id="配置Worker选项"><a href="#配置Worker选项" class="headerlink" title="配置Worker选项"></a>配置Worker选项</h3><ul><li>name：在工作者线程中通过self.name获取字符串标识符</li><li>type: 表示加载脚本的运行方式</li><li>credentials：当type为module时，指定如何获取与传输凭证数据相关的工作者线程模块脚本。</li></ul><h3 id="在JS行内创建工作者线程"><a href="#在JS行内创建工作者线程" class="headerlink" title="在JS行内创建工作者线程"></a>在JS行内创建工作者线程</h3><p>专用工作者线程也可以通过Blob对象URL在行内脚本创建，这样可以更快的初始化工作者线程，因为没有网络延迟。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">self.addEventListener('message',(&#123;data&#125;)=>console.log(data))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>工作者线程可以利用函数序列化来初始化行内脚本，因为函数的toString()方法返回函数代码的字符串，而函数可以在父上下文中定义但在子上下文中执行</p><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> workerScript <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">self.postMessage((</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fibonacci<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)(4))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>workerScript<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然递归计算斐波那契数列比较耗时，但所有的计算都会委托到工作者线程，因此并不会影响父上下文的性能</p><blockquote><p>不过像这样序列化函数有个前提，就是函数体内不能使用通过闭包获得的引用，也包括全局变量，比如window，因为这些引用在工作者线程中执行会报错</p></blockquote><h3 id="在工作者线程中动态执行脚本"><a href="#在工作者线程中动态执行脚本" class="headerlink" title="在工作者线程中动态执行脚本"></a>在工作者线程中动态执行脚本</h3><p>在工作者线程中可以使用importScripts()方法通过编程方式加载和执行任意脚本。</p><p>该方法可用于全局Worker对象，可接受任意数量的脚本作为参数，浏览器下宅他们没有限制，但执行会严格按照他们在参数列表的顺序进行。</p><p>所有导入的脚本也会共享作用域</p><h3 id="委托任务到子线程"><a href="#委托任务到子线程" class="headerlink" title="委托任务到子线程"></a>委托任务到子线程</h3><p>工作者线程中可以再创建子工作者线程，顶级工作者线程的脚本和子工作者线程的脚本都必须从与主页相同的源加载。</p><h3 id="处理工作者线程错误"><a href="#处理工作者线程错误" class="headerlink" title="处理工作者线程错误"></a>处理工作者线程错误</h3><p>如果工作者线程脚本抛出了错误，该工作者线程沙盒可以阻止它打断父线程的执行。</p><p>不过相应的错误事件仍会冒泡到工作者线程上下文，因此可以通过在Worker对象上设置错误事件侦听器访问到。</p><h3 id="与专用工作者线程之间的通信"><a href="#与专用工作者线程之间的通信" class="headerlink" title="与专用工作者线程之间的通信"></a>与专用工作者线程之间的通信</h3><h4 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage()"></a>postMessage()</h4><h4 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel()"></a>MessageChannel()</h4><ul><li>端口</li></ul><h4 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel()"></a>BroadcastChannel()</h4><p>同源脚本能够通过BroadcastChannel相互之间发送和接受消息，这种信道没有端口所有权的概念，如果没有实时监听这个信道，广播的消息就不会有人处理。</p><p>太多了，后续再补上</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工作者线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器那些事：聊聊浏览器内核的多线程机制</title>
      <link href="/2021/12/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%9A%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/12/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%9A%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>先来复习一下进程和线程的概念</p><ul><li>进程是CPU资源分配的最小单位</li><li>进程之间相互独立</li><li>一个进程由一个或多个线程组成</li><li>线程是CPU调度的最小单位</li><li>多个线程相互协作完成进程的任务</li><li>同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等）</li></ul><h2 id="浏览器是多进程的"><a href="#浏览器是多进程的" class="headerlink" title="浏览器是多进程的"></a>浏览器是多进程的</h2><p>浏览器之所以能够运行，是因为系统给它的进程分配了资源（CPU、内存）</p><p>可以简单理解为每打开一个Tab页面，就相当于创建了一个独立的浏览器进程，但浏览器有优化机制，有些进程可能会被合并，比如打开多个空白标签页可能会被合并为一个进程，但我试过发现并没有。。</p><p><img src="https://s2.loli.net/2021/12/26/HFC2jd8holLDAk6.png" alt="image.png"></p><h3 id="多进程的优势"><a href="#多进程的优势" class="headerlink" title="多进程的优势"></a>多进程的优势</h3><ul><li>避免单个页面或第三方插件crash影响整个浏览器</li><li>多进程充分利用多核优势</li><li>方便使用沙盒模型隔离插件等进程，提高浏览器稳定性</li></ul><p>当然，多线程会使内存等资源消耗更大，有空间换时间的思想</p><h2 id="浏览器主要包含哪些进程"><a href="#浏览器主要包含哪些进程" class="headerlink" title="浏览器主要包含哪些进程"></a>浏览器主要包含哪些进程</h2><h3 id="Browser进程"><a href="#Browser进程" class="headerlink" title="Browser进程"></a>Browser进程</h3><p>浏览器的主进程（负责协调、主控）</p><p>作用大概如下：</p><ul><li>负责浏览器的界面显示，与用户交互。如前进、后退等</li><li>负责各个页面的管理，创建和销毁其他进程</li><li>将Renderer进程得到的内存中的<a href="https://baike.sogou.com/v248671.htm?fromTitle=Bitmap">Bitmap</a>绘制到用户界面上</li><li>网络资源的下载、管理等</li></ul><h3 id="第三方插件进程"><a href="#第三方插件进程" class="headerlink" title="第三方插件进程"></a>第三方插件进程</h3><p>每种类型的插件对应一个进程，仅当使用该插件时才创建</p><h3 id="GPU进程"><a href="#GPU进程" class="headerlink" title="GPU进程"></a>GPU进程</h3><p>最多一个，用于3D绘制等</p><h3 id="Renderer进程（浏览器内核）"><a href="#Renderer进程（浏览器内核）" class="headerlink" title="Renderer进程（浏览器内核）"></a>Renderer进程（浏览器内核）</h3><p>对于普通的前端操作来说，最终要的就是渲染。这是重点</p><p>该进程拥有多个线程，这些线程共同来完成页面的渲染任务。</p><p>看看都有哪些线程</p><h4 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h4><ul><li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等</li><li>当界面需要重绘或回流时，该线程就会执行</li><li>该线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中<strong>等到JS引擎空闲时</strong>立即被执行。</li></ul><h4 id="JS引擎线程"><a href="#JS引擎线程" class="headerlink" title="JS引擎线程"></a>JS引擎线程</h4><ul><li>也称JS内核，负责处理JS脚本程序（如V8引擎）</li><li>JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序</li></ul><h4 id="事件触发线程"><a href="#事件触发线程" class="headerlink" title="事件触发线程"></a>事件触发线程</h4><ul><li><code>JS脚本</code>的执行不会影响到<code>html元素</code>事件的触发，由于<code>JS单线程</code>关系，会将触发后需要执行的<code>JS脚本</code>添加到<code>JavaScript引擎</code>的处理队列中，当<code>JavaScript引擎</code>空闲时才会去执行。</li><li>注意，该线程只是<strong>触发</strong>，触发后要执行的代码依然要放到JS引擎线程中去执行。</li></ul><h4 id="定时触发器线程"><a href="#定时触发器线程" class="headerlink" title="定时触发器线程"></a>定时触发器线程</h4><ul><li><code>setTimeout</code>和<code>setInterval</code>所在的线程。</li><li>由于<code>JavaScript引擎</code>是单线程的，如果处于阻塞线程状态势必会影响计时的准确性，所以浏览器中的定时器并不是由<code>JavaScript引擎</code>来计数的。</li><li>该线程只是计时，一旦计时完毕后，会将触发的脚本添加到<code>JavaScript引擎</code>的处理队列中，等待<code>JavaScript引擎</code>空闲后再执行。</li><li>注意，<code>W3C</code>在<code>HTML标准</code>中规定，规定要求<code>setTimeout</code>中低于<code>4ms</code>的时间间隔算为<code>4ms</code>。</li></ul><h4 id="异步HTTP请求线程"><a href="#异步HTTP请求线程" class="headerlink" title="异步HTTP请求线程"></a>异步HTTP请求线程</h4><ul><li>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求</li><li>当状态发生变化时，如果之前有设置回调，会将这个回调再放入<code>JavaScript引擎</code>的处理队列中，再由JavaScript引擎执行。</li></ul><h2 id="Browser进程和Renderer进程的通信过程"><a href="#Browser进程和Renderer进程的通信过程" class="headerlink" title="Browser进程和Renderer进程的通信过程"></a>Browser进程和Renderer进程的通信过程</h2><ul><li>Browser进程收到用户请求，首先需要获取页面内容（譬如通过网络下载资源），随后将该任务通过RendererHost接口传递给Render进程</li><li>Renderer进程的Renderer接口收到消息，简单解释后，交给渲染线程，然后开始渲染<ul><li>渲染线程接收请求，加载网页并渲染网页，这其中可能需要Browser进程获取资源和需要GPU进程来帮助渲染</li><li>可能会有JS线程操作DOM（这样可能会造成回流并重绘）</li><li>最后Render进程将结果传递给Browser进程</li></ul></li><li>Browser进程接收到结果并将结果绘制出来</li></ul><h2 id="Renderer进程中线程之间的关系"><a href="#Renderer进程中线程之间的关系" class="headerlink" title="Renderer进程中线程之间的关系"></a>Renderer进程中线程之间的关系</h2><h3 id="GUI渲染线程与JS引擎线程互斥"><a href="#GUI渲染线程与JS引擎线程互斥" class="headerlink" title="GUI渲染线程与JS引擎线程互斥"></a>GUI渲染线程与JS引擎线程互斥</h3><p>由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。</p><p>因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起， GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。</p><h3 id="JS阻塞页面加载"><a href="#JS阻塞页面加载" class="headerlink" title="JS阻塞页面加载"></a>JS阻塞页面加载</h3><p>从上述的互斥关系，可以推导出，JS如果执行时间过长就会阻塞页面。</p><h3 id="工作者线程，JS的多线程？"><a href="#工作者线程，JS的多线程？" class="headerlink" title="工作者线程，JS的多线程？"></a>工作者线程，JS的多线程？</h3><blockquote><p>Worker 接口是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers API </a>的一部分，指的是一种可由脚本创建的后台任务，任务执行中可以向其创建者收发信息。要创建一个 Worker <strong>，</strong>只须调用 <code>Worker(URL) </code>构造函数，函数参数 <code>URL</code> 为指定的脚本。</p><p>Worker 也可以创建新的 Worker，当然，所有 Worker 必须与其创建者<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">同源</a>（注意：<a href="https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5R3B4RN4GHU">Blink</a>暂时不支持嵌套 Worker）。 </p><p>需要注意的是，不是所有函数和构造函数(或者说…类)都可以在 Worker 中使用。具体参考页面 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">Worker 所支持的函数和类</a>。Worker 可以使用 <a href="https://developer.mozilla.org/en-US/DOM/XMLHttpRequest"><code>XMLHttpRequest</code></a> 发送请求，但是请求的 <code>responseXML</code> 与 <code>channel</code> 两个属性值始终返回 <code>null</code> （<code>fetch</code> 仍可正常使用，没有类似的限制）。 </p></blockquote><ul><li>创建Worker时，JS引擎向浏览器申请开一个子线程（子线程是浏览器开的，完全受主线程控制，而且不能操作DOM）</li><li>JS引擎线程与worker线程间通过特定的方式通信（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/postMessage">postMessage</a> ，需要通过序列化对象来与线程交互特定的数据）</li></ul><p>如果有非常耗时的工作，单独开一个Worker线程，这样里面不管如何翻天覆地都不会影响JS引擎主线程， 只待计算出结果后，将结果通信给主线程即可</p><p><strong>JS引擎是单线程的</strong>，这一点的本质仍然未改变，Worker可以理解是浏览器给JS引擎开的外挂，专门用来解决那些大量计算问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性你了解多少：模块</title>
      <link href="/2021/12/25/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9A%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/12/25/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9A%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/26/Im6VY8rGshabLOw.jpg" alt="微信图片_20211226160317.jpg"><br>javascript用共享一切的方法加载代码，这是这个语言中最容易出错且容易令人感到困惑的地方。在ES6之前，应用程序的每一个Javascript中定义的一切都共享一个全局的作用域，容易引发命名冲突和安全问题。</p><p>为了解决作用域问题，使JS应用程序变得有序，便引进了模块。</p><blockquote><p>在ES6模块规范出现前，浏览器原生并不支持模块的行为，ECMAScript同样不支持模块，因此希望使用模块模式的库或代码库必须基于JavaScript的语法和词法特性’伪造’出类似模块的行为</p></blockquote><h3 id="模块思想"><a href="#模块思想" class="headerlink" title="模块思想"></a>模块思想</h3><p>把逻辑分块，各自封装，相互独立，每个块自行决定对外暴露的内容，同时自行决定引入执行哪些外部代码</p><h3 id="模块标识符"><a href="#模块标识符" class="headerlink" title="模块标识符"></a>模块标识符</h3><p>模块系统本质上是键值实体，其中每个模块都有个可用于引用它的标识符。</p><p>原生浏览器模块标识符必须提供实际JS文件的路径。除了文件路径，Node.js还会搜索node_modules目录，用标识符去匹配包含index.js的目录</p><h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><p>模块系统的核心是管理依赖。指定依赖的模块与周围的环境会达成一种契约。本地模块向模块系统声明一组外部模块，这些外部模块对于当前模块正常运行是必需的。模块系统检视这些依赖，确保这些外部模块能够被加载并在本地模块运行时初始化所有依赖。</p><h3 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h3><p>加载模块的概念派生自依赖契约，当一个外部模块被指定为依赖时，本地模块期望在执行它时，依赖已准备好并已初始化。</p><p>浏览器会递归地评估并加载所有依赖，知道所有依赖模块都加载完成。</p><p>只有整个依赖图都加载完成，才可以执行入口文件</p><p>模块加载是阻塞的，意味着前置操作必须完成才能执行后续操作。每个模块在自己的代码到达浏览器之后完成加载，此时其依赖已经加载并初始化。</p><h3 id="动态依赖"><a href="#动态依赖" class="headerlink" title="动态依赖"></a>动态依赖</h3><p>有的模块系统要求开发者在模块开始列出所有依赖，有些允许开发者在程序结构中动态添加依赖。</p><p>动态添加的依赖必须在模块执行前加载完毕。虽然支持更复杂的依赖关系，但增加了对模块进行静态分析的难度</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>模块中包含的要发送到浏览器的JavaScript代码经常会被静态分析，分析工具会检查代码结构并在不实际执行代码 的情况下推断其行为。</p><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><p>所有的模块系统都支持循环依赖，在包含循环依赖的程序中，模块的加载顺序可能会出人意料，都是执行深度优先的依赖加载</p><h2 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h2><p>ES6最大的一个改进是引入了模块规范</p><p>模块是自动运行在严格模式下并且没有办法退出运行的JS代码。</p><p>在模块顶部创建的变量不会自动添加到全局共享作用域，仅在该模块的顶级作用域中存在。</p><p>在模块顶部this值为undefined</p><p>模块不支持HTML风格的代码注释</p><p>ES6模块是异步加载执行的</p><p>脚本，也就是任何不是模块的JS代码，缺少这些特性</p><h2 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h2><p>使用export关键字暴露相关代码给其他模块</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">'yqx'</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> sum <span class="token keyword">as</span> add <span class="token punctuation">&#125;</span> <span class="token comment">// 可重命名</span><span class="token keyword">export</span> <span class="token keyword">default</span> sum<span class="token punctuation">;</span> <span class="token comment">// 可导出默认值</span><span class="token comment">// 导入</span><span class="token keyword">import</span> sum<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">,</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"导出的文件相对路径"</span> <span class="token comment">// 默认值必须排在非默认值前面 </span></code></pre><p>可以为每个模块设置一个默认的导出值</p><p>import语句为变量、函数和类创建的是只读绑定，因此不能给导入的绑定重新赋值</p><p>export和import必须在其他语句和函数之外使用，因此不能动态的导入导出</p><p>导入导出都可重命名</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>sum<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'相对路径'</span> <span class="token comment">// 重新导出一个绑定</span></code></pre><p>模块可以不导出任何东西，通过无绑定导入执行模块中的代码。一般用于创建Polyfill和Shim</p><h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>ES6只是定义了模块的语法，但它并没有定义如何加载模块，这正是规范复杂性的一个体现，应由不同的实现环境来决定</p><h3 id="在Web浏览器中使用模块"><a href="#在Web浏览器中使用模块" class="headerlink" title="在Web浏览器中使用模块"></a>在Web浏览器中使用模块</h3><p>Web浏览器有多种方式将JS包含在Web应用程序中</p><ul><li>在script元素中通过src属性指定加载代码的地址</li><li>将JS代码内嵌到没有src属性的srcript元素中</li><li>通过Web Worker 或Service Worker的方法加载并执行JS文件</li></ul><h4 id="在script元素中使用模块"><a href="#在script元素中使用模块" class="headerlink" title="在script元素中使用模块"></a>在script元素中使用模块</h4><p>当type属性的值为module时支持加载模块，当无法识别type的值时，浏览器会忽略script元素</p><h4 id="模块加载顺序"><a href="#模块加载顺序" class="headerlink" title="模块加载顺序"></a>模块加载顺序</h4><p>当type=”module”时自动应用defer属性。一旦HTML解析器遇到模块类型便开始下载模块文件，知道文档被完全解析模块才会执行。并且模块按照他们在文档中出现的顺序执行</p><p>async属性也可以被应用在模块上，需要确保当模块执行前，其所需的所有资源都下载完成，但不能保证的时模块的执行时机。</p><h4 id="将模块作为worker加载"><a href="#将模块作为worker加载" class="headerlink" title="将模块作为worker加载"></a>将模块作为worker加载</h4><p>通过使用Web Workers，Web应用程序可以在独立于主线程的后台线程中，运行一个脚本操作。这样做的好处是可以在独立线程中执行费时的处理任务，从而允许主线程（通常是UI线程）不会因此被阻塞/放慢。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> worker1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"script.js"</span><span class="token punctuation">)</span><span class="token keyword">let</span> worker2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"module.js"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">"module"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="与CommonJS的区别"><a href="#与CommonJS的区别" class="headerlink" title="与CommonJS的区别"></a>与CommonJS的区别</h2><table><thead><tr><th></th><th>CommonJS</th><th>es模块</th></tr></thead><tbody><tr><td>指定依赖</td><td>require</td><td>import</td></tr><tr><td>导出</td><td>module.exports</td><td>export</td></tr><tr><td>动态加载</td><td>可以</td><td>不可以</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性你了解多少：Set、Map、WeakSet、WeakMap</title>
      <link href="/2021/12/25/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9ASet%E3%80%81Map%E3%80%81WeakSet%E3%80%81WeakMap/"/>
      <url>/2021/12/25/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9ASet%E3%80%81Map%E3%80%81WeakSet%E3%80%81WeakMap/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/25/tNCPOWxzVBkhJos.jpg" alt="微信图片_20211225134712.jpg"></p><p>长久以来，数组一直是JS中唯一的集合类型。由于数组使用的是数值型索引，因此如果需要使用非数值索引就会用非数组对象创建所需的数据结构，这就是Set和Map的早期实现</p><p>但通过Object.create(null)这种形式模拟的集合有很多问题，比如所有对象的属性名必须是字符串类型，必须确保每个键名都是字符串类型且在对象中是唯一的。</p><p>而且判断存在时，若值为1可能会混淆。</p><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set类型是一种有序列表，允许你存储任何类型的唯一值，通过Set集合可以快速的访问其中的数据</p><p>传入完全相同的值，后者会被忽略</p><p>注意Set认为+0与-0、NaN与NaN是相同的</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class="language-js" data-language="js"><code class="language-js">add <span class="token comment">// 添加</span>clear <span class="token comment">// 移除全部</span><span class="token keyword">delete</span> <span class="token comment">// 移除某个</span>has <span class="token comment">// 查看是否存在某个元素</span>forEach <span class="token comment">// 为每个元素调用一次callBackFun(value,key,ownerSet)</span>三种生成迭代器的方法<span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意Set集合本没有键名，但为了与其他集合保持键值对的形式，所以让Set集合的每个元素也按键值对的形式存储，但键和值完全一样(包括类型)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ownerSet</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>forEach的第二个参数可以传入this，或者第一个参数是箭头函数形式绑定this</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token number">3</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 数组转换为Set,会自动去重</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token comment">// Set转换为数组 [1,2,3,4,5]</span></code></pre><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>我们都知道，为了不造成内存泄漏，最好及时的将不再使用的变量设为null,从而确保其内存可以在适当的时候被回收</p><p>将对象存储在Set的实例与存储在变量中完全一样，只要Set实例中的引用存在，垃圾回收机制就不能释放该对象的内存空间</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span></code></pre><p>为了解决内存泄漏问题，WeakSet集合诞生了，顾名思义即弱引用Set集合。</p><p>WeakSet集合只存储对象的弱引用，并且不可以存储原始值；集合中的弱引用如果是对象唯一的引用，则会被回收并释放相应的内存</p><pre class="language-js" data-language="js"><code class="language-js">key1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  key2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key1<span class="token punctuation">,</span>key2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>key1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 移除对象key1的最后一个强引用(WeakSet中的引用也会被自动移除)</span></code></pre><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><pre class="language-js" data-language="js"><code class="language-js">addhas<span class="token keyword">delete</span></code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>在WeakSet实例中，如果向add()传入非对象参数会导致程序报错，向has()和delete()传入非对象参数会返回false</li><li>WeakSet集合不暴露任何迭代器，不可迭代</li><li>不支持forEach方法和size属性</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始值</a>) 都可以作为一个键或一个值。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'yqx'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 初始化</span><span class="token keyword">set</span> <span class="token comment">// 添加</span><span class="token keyword">get</span> <span class="token comment">// 获取</span>其他与Set集合差不多</code></pre><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>意外的键</td><td>默认不包含任何键</td><td>有一个原型，有可能和原型链上的键名有冲突，虽然可以用Object.create(null)创建一个没有原型的对象，但这种用法并不常见</td></tr><tr><td>键的类型</td><td>任意值</td><td>必须是String或Symbol</td></tr><tr><td>键的顺序</td><td>有序</td><td>无序</td></tr><tr><td>Size</td><td>可以通过size属性获取键值对个数</td><td>只能手动计算</td></tr><tr><td>迭代</td><td>可以</td><td>默认不可以，需要修改Symbol.iterator属性才可以</td></tr><tr><td>性能</td><td>在频繁增删键值对的场景下表现更好</td><td>未作出优化</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>与WeakSet大部分设计理念一至</p><p>方法多列一个get方法用于获取某个元素</p><p>补充一下，VUE3中的响应式实现原理有使用到这个新特性</p>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性你了解多少：整一个Iterator和Generator</title>
      <link href="/2021/12/24/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9A%E6%95%B4%E4%B8%80%E4%B8%AAIterator%E5%92%8CGenerator/"/>
      <url>/2021/12/24/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9A%E6%95%B4%E4%B8%80%E4%B8%AAIterator%E5%92%8CGenerator/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/24/SkqwOfjXMJR4uLK.jpg" alt="微信图片_20211224213416.jpg"></p><p>今天我们来认真学习一下在ES6中出现的全新功能: 迭代器和生成器</p><h2 id="为什么要加入这个新功能"><a href="#为什么要加入这个新功能" class="headerlink" title="为什么要加入这个新功能"></a>为什么要加入这个新功能</h2><p>我们之前使用for循环遍历时，如果多个嵌套需要追踪多个变量，代码复杂度也会增加。</p><p>迭代器的出现就是为了简化数据操作，消除这种复杂性并减少循环中的错误</p><h2 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h2><ul><li><p>迭代器是一个对象</p></li><li><p>对象有next()方法，调用该方法会返回一个对象,可接受参数用于代替生成器内部上一条yield语句的返回值,第一次调用传参无效</p></li><li><p>返回的对象有value和done属性，value表示下一个将要返回的值；done用于表示是否已迭代完，默认值为false,迭代完其值为true</p></li><li></li></ul><p>来造一个迭代器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">replaceValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> done <span class="token operator">=</span> i <span class="token operator">>=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token operator">!</span>done <span class="token operator">?</span> items<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        value<span class="token punctuation">,</span>        done<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="什么是生成器"><a href="#什么是生成器" class="headerlink" title="什么是生成器"></a>什么是生成器</h2><ul><li>生成器是返回迭代器的函数</li><li>通过function关键字后面的*符号定义，两者可贴在一起也可空一格</li><li>函数中会有yield关键字，通过它指定调用迭代器的next()方法时的返回值和返回顺序</li><li>每执行完一条yield语句后函数就会自动停止执行，可以返回任何值或表达式</li><li>yield不能穿透函数边界</li><li>不能用箭头函数创建生成器</li></ul><p>它大概长啥样</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 长这样</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// 也可以长这样</span><span class="token keyword">let</span> <span class="token function-variable function">createIterator</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// 还可以这样</span><span class="token keyword">let</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">createIterator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator<span class="token operator">=</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><ul><li>可迭代对象有Symbol.iterator属性，该属性通过指定函数可以返回一个作用于附属对象的迭代器</li><li>在ES6中，所有的集合对象（数组、Set集合和Map集合）和字符串都是可迭代对象，都有默认的迭代器</li><li>所有通过生成器创建的迭代器都是可迭代对象</li></ul><h3 id="访问默认迭代器"><a href="#访问默认迭代器" class="headerlink" title="访问默认迭代器"></a>访问默认迭代器</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> values<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="创建可迭代对象"><a href="#创建可迭代对象" class="headerlink" title="创建可迭代对象"></a>创建可迭代对象</h3><p>默认情况下，开发者定义的对象都是不可迭代对象，但如果给Symbol.iterator属性添加一个生成器，则可以将其变成可迭代对象</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> collection <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> item<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  collection<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  collection<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  collection<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> collection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h4><p>for-of通过调用可迭代对象的Symbol.iterator方法来获取迭代器，这一过程是由java引擎背后完成的</p><p>循环每执行一次都会调用得带起对象的next()方法，并将迭代器返回的结果对象的value属性存储在一个变量中，一直到done属性的值为true</p><p>如果for-of用于不可迭代对象、null、undefined将会导致程序抛出错误</p><h2 id="内建迭代器"><a href="#内建迭代器" class="headerlink" title="内建迭代器"></a>内建迭代器</h2><ul><li><p>数组、Map集合、Set集合都内建了一下三种迭代器</p><ul><li>entries() 返回一个迭代器，其值为多个键值对，Map集合的默认迭代器<ul><li>调用next()返回一个数组，其中两个元素分别是键值</li></ul></li></ul><p>可解构</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'yqx'</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> data<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span></code></pre><ul><li>values() 返回一个迭代器。其值为集合的值，数组和Set集合的默认迭代器</li><li>keys() 返回一个迭代器，其值为集合中的所有键名</li></ul></li></ul><h2 id="字符串迭代器"><a href="#字符串迭代器" class="headerlink" title="字符串迭代器"></a>字符串迭代器</h2><p>我们知道可以通过类似数组下标的形式访问字符串中的某个字符，但由于方括号操作的是编码单元而非字符，因此无法正确访问双字节字符。</p><p>使用for-of可输出正确内容</p><h2 id="NodeList迭代器"><a href="#NodeList迭代器" class="headerlink" title="NodeList迭代器"></a>NodeList迭代器</h2><p>也拥有默认迭代器</p><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p>展开运算符可以作用于任意可迭代对象，可将迭代对象转换为数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"yqx"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="在迭代器中抛出错误和处理"><a href="#在迭代器中抛出错误和处理" class="headerlink" title="在迭代器中抛出错误和处理"></a>在迭代器中抛出错误和处理</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">yield</span> first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不会执行</span></code></pre><p>处理</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> first    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        first<span class="token operator">=</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">yield</span> first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意调用throw方法也会像掉哦那个next()方法一样返回一个结果对象</p><h2 id="生成器返回值"><a href="#生成器返回值" class="headerlink" title="生成器返回值"></a>生成器返回值</h2><p>在return语句可以指定一个返回值，该值将被赋值给返回对象的value属性</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="委托生成器"><a href="#委托生成器" class="headerlink" title="委托生成器"></a>委托生成器</h2><p>可将两个迭代器合二为一，将生成数据的过程委托给其他迭代器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">combined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">combined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="异步任务执行"><a href="#异步任务执行" class="headerlink" title="异步任务执行"></a>异步任务执行</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>callack<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">taskDef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> task<span class="token operator">=</span> <span class="token function">taskDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result<span class="token operator">=</span>task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result<span class="token punctuation">.</span>value<span class="token operator">===</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                result<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        result<span class="token operator">=</span>task<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    result<span class="token operator">=</span>task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result<span class="token operator">=</span>task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次失败的笔试经历</title>
      <link href="/2021/12/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
      <url>/2021/12/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%AC%94%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/21/mplfuS6HzxYkcaW.jpg" alt="微信图片_20211221231737.jpg"><br>今天参加CVTE笔试,真是失败啊！首先时间把握的很不好，由于它把算法题放在了前面，便以为后面还有算法题，加急做完，效果很不好，很多逻辑没理好，后面那些选择题也是匆忙做完结果交卷的时候还有45分钟，离大谱啊杨启香。。。。。。。。</p><p>说多了都是泪，通过这次笔试还是发现了自己还有很多不足，主要是计网和node以及一些event事件发现还是理解不够，吃一堑，长一智，现在就慢慢复盘一下考察的知识点吧</p><p>前程尚远，步步耕耘啊杨启香</p><h2 id="获取元素的节点有哪些方式"><a href="#获取元素的节点有哪些方式" class="headerlink" title="获取元素的节点有哪些方式"></a>获取元素的节点有哪些方式</h2><h3 id="Document-getElementsByName和document-querySelectorAll"><a href="#Document-getElementsByName和document-querySelectorAll" class="headerlink" title="Document.getElementsByName和document.querySelectorAll"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementsByName">Document.getElementsByName</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll"><code>document.querySelectorAll</code></a></h3><ul><li>返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList">NodeList</a>类数组对象</li></ul><h2 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h2><p>题目描述：使用buildTree构建完全二叉树，使用levelPoint以层序遍历方式输出二叉树</p><p>实现</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> totalLevel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>totalLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> totalLevel <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> totalLevel <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">levelPrint</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> levelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> levelLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> curNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    levelArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>levelArr<span class="token punctuation">.</span>length <span class="token operator">===</span> levelLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">)</span><span class="token punctuation">;</span>      levelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      levelLength <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> totalLevel <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token function">buildTree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> totalLevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">levelPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></code></pre><h2 id="算法2"><a href="#算法2" class="headerlink" title="算法2"></a>算法2</h2><p>题目描述：实现洗牌算法函数shuffle,给定一个数组[0，1，2，3，4，5，6],每次随机抽选数组的n个值,连续抽选不重复已经抽选的值，知道数组抽完，再进入下一轮循环</p><p>示例1：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> random<span class="token operator">=</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[5]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[4]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[6]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span></code></pre><p>示例2：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> random<span class="token operator">=</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0,6]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2]</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3,4,5,2]</span></code></pre><p>实现</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          temp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> random <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"一轮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>令人惊喜的是，我过了，嘎嘎嘎嘎嘎！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊slot</title>
      <link href="/2021/12/19/%E8%81%8A%E8%81%8Aslot/"/>
      <url>/2021/12/19/%E8%81%8A%E8%81%8Aslot/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.baike.soso.com/ugc/baikepic2/17395/cut-20180727085534-1810231141_jpg_525_394_35235.jpg/300"></p><p>slot⼜名插槽，是Vue的内容分发机制，组件内部的模板引擎使⽤slot元素作为承载分发内容的出⼝。插槽slot是⼦组件的⼀个模板标签元素，⽽这⼀个标签元素是否显示，以及怎么显示是由⽗组件决定的。</p><h2 id="小示例"><a href="#小示例" class="headerlink" title="小示例"></a>小示例</h2><pre class="language-html" data-language="html"><code class="language-html">// 父组件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestSlot</span><span class="token punctuation">></span></span> 我是放在父组件的数据 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TestSlot</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html">// 子组件模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testSlot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>当组件渲染的时候，<code>&lt;slot&gt;&lt;/slot&gt;</code> 将会被替换为“我是放在父组件的数据”。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 渲染 HTML --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testSlot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    我是放在父组件的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>插槽还可以包含任何模板代码，包括 HTML,或其他组件</p><p>如果 <code>&lt;TestSlot&gt;</code> 的 template 中<strong>没有</strong>包含一个 <code>&lt;slot&gt;</code> 元素，则该组件起始标签和结束标签之间的任何内容都会被抛弃。</p><h2 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h2><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p><p>插槽<strong>不能</strong>访问 <code>&lt;TestSlot&gt;</code> 的作用域。例如，尝试访问 <code>action</code> 将不起作用：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestSlot</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123; action &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TestSlot</span><span class="token punctuation">></span></span></code></pre><p>控制台会给出警告：Property “action” was accessed during render but is not defined on instance. </p><h2 id="备用内容"><a href="#备用内容" class="headerlink" title="备用内容"></a>备用内容</h2><p>有时为一个插槽指定备用 (也就是默认的) 内容是很有用的，它只会在没有提供内容的时候被渲染。</p><pre class="language-html" data-language="html"><code class="language-html">// 父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestSlot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TestSlot</span><span class="token punctuation">></span></span> // 子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 渲染 HTML --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p><code>&lt;slot&gt;</code> 元素有一个特殊的 attribute：<code>name</code>。通过它可以为不同的插槽分配独立的 ID，也就能够以此来决定内容应该渲染到什么地方,一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><pre class="language-html" data-language="html"><code class="language-html">// base-layout子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span></code></pre><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。当一个组件被用来渲染一个项目数组时，这是一个常见的情况，我们希望能够自定义每个项目的渲染方式。</p><p>要使 子组件中的数据在父级提供的插槽内容上可用，我们可以添加一个 <code>&lt;slot&gt;</code> 元素并将其作为一个 attribute 绑定：</p><pre class="language-html" data-language="html"><code class="language-html">// 子组件TestSlot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span>          <span class="token attr-name">:nickName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span>          <span class="token attr-name">:avatar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.avatar<span class="token punctuation">"</span></span>          <span class="token attr-name">:skills</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.skills<span class="token punctuation">"</span></span>          <span class="token attr-name">:weakness</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.weakness<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span>loss of data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span>        <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html">// 父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestSlot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps.avatar<span class="token punctuation">"</span></span>        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>        <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; slotProps.nickName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; slotProps.skills &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; slotProps.weakness &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TestSlot</span><span class="token punctuation">></span></span></code></pre><h3 id="独占默认插槽的写法"><a href="#独占默认插槽的写法" class="headerlink" title="独占默认插槽的写法"></a>独占默认插槽的写法</h3><p>当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot</code> 直接用在组件上：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-check<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; slotProps.item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span></code></pre><h3 id="解构插槽"><a href="#解构插槽" class="headerlink" title="解构插槽"></a>解构插槽</h3><p>作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">slotProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... 插槽内容 ...</span><span class="token punctuation">&#125;</span></code></pre><p>这意味着 <code>v-slot</code> 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。因此你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring">ES2015 解构</a> 来传入具体的插槽 prop，如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; item &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-check<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span>// 重命名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; item：todo &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span>// 定义备选内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; item = <span class="token punctuation">"</span></span><span class="token attr-name">Placeholder"</span> <span class="token attr-name">&#125;"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span></code></pre><h2 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h2><p><a href="https://v3.cn.vuejs.org/guide/template-syntax.html#%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0">动态指令参数</a>也可以用在 <code>v-slot</code> 上，来定义动态的插槽名：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[dynamicSlotName]</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span></code></pre><h2 id="具名插槽缩写"><a href="#具名插槽缩写" class="headerlink" title="具名插槽缩写"></a>具名插槽缩写</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; item &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-check<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式计算与侦听</title>
      <link href="/2021/12/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%A1%E7%AE%97%E4%B8%8E%E4%BE%A6%E5%90%AC/"/>
      <url>/2021/12/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%A1%E7%AE%97%E4%B8%8E%E4%BE%A6%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/19/m4YqWOPs21X5MrK.jpg" alt="微信图片_20211219164119.jpg"></p><p>监听变量的变化做出响应的反应我们通常会用到computed和watch和watchEffect这几种方式。</p><p>但三者是怎么使用的以及差异在哪，我们今天就来探个究竟</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> type ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComputedRef</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">WritableComputedRef</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  readonly value<span class="token operator">:</span> <span class="token constant">T</span>  <span class="token punctuation">[</span>ComputedRefSymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// 只读的</span><span class="token keyword">export</span> <span class="token keyword">function</span> computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>  getter<span class="token operator">:</span> ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>  debugOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WritableComputedOptions</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  get<span class="token operator">:</span> ComputedGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>  set<span class="token operator">:</span> ComputedSetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WritableComputedRef</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  readonly effect<span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token comment">// 可写的</span><span class="token keyword">export</span> <span class="token keyword">function</span> computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>  options<span class="token operator">:</span> WritableComputedOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>  debugOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> WritableComputedRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DebuggerOptions</span> <span class="token punctuation">&#123;</span>  onTrack<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> DebuggerEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  onTrigger<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> DebuggerEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> type DebuggerEvent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> DebuggerEventExtraInfo<span class="token keyword">export</span> type DebuggerEventExtraInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  target<span class="token operator">:</span> object  type<span class="token operator">:</span> TrackOpTypes <span class="token operator">|</span> TriggerOpTypes  key<span class="token operator">:</span> any  newValue<span class="token operator">?</span><span class="token operator">:</span> any  oldValue<span class="token operator">?</span><span class="token operator">:</span> any  oldTarget<span class="token operator">?</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token operator">|</span> Set<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">&#125;</span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>根据类型定义我们知道computed可以接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">ref</a> 对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// plusOne.value++; // Cannot assign to 'value' because it is a read-only property.</span><span class="token keyword">function</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> plusOne<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> plusOne <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addCount"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>或者，接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    count<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>plusOne<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span></code></pre><h3 id="调试computed"><a href="#调试computed" class="headerlink" title="调试computed"></a>调试computed</h3><p><code>computed</code> 可接受一个带有 <code>onTrack</code> 和 <code>onTrigger</code> 选项的对象作为第二个参数：</p><ul><li><code>onTrack</code> 会在某个响应式 property 或 ref 作为依赖被追踪时调用。</li><li><code>onTrigger</code> 会在侦听回调被某个依赖的修改触发时调用。</li></ul><p>所有回调都会收到一个 debugger 事件，其中包含了一些依赖相关的信息。推荐在这些回调内放置一个 <code>debugger</code> 语句以调试依赖。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">onTrack</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 作为依赖被追踪时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 被修改时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 访问 plusOne，应该触发 onTrack</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 修改 count.value，应该触发 onTrigger</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span></code></pre><p><code>onTrack</code> 和 <code>onTrigger</code> 仅在开发模式下生效。</p><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><h3 id="类型声明-1"><a href="#类型声明-1" class="headerlink" title="类型声明"></a>类型声明</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">declare type <span class="token function-variable function">InvalidateCbRegistrator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">export</span> declare type <span class="token function-variable function">WatchEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">onInvalidate<span class="token operator">:</span> InvalidateCbRegistrator</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">export</span> declare <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token operator">:</span> WatchEffect<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptionsBase</span><span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle<span class="token punctuation">;</span><span class="token keyword">export</span> declare <span class="token keyword">interface</span> <span class="token class-name">WatchOptionsBase</span> <span class="token keyword">extends</span> <span class="token class-name">DebuggerOptions</span> <span class="token punctuation">&#123;</span>    flush<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'pre'</span> <span class="token operator">|</span> <span class="token string">'post'</span> <span class="token operator">|</span> <span class="token string">'sync'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">export</span> declare type <span class="token function-variable function">WatchStopHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span></code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// -> logs 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="停止监听"><a href="#停止监听" class="headerlink" title="停止监听"></a>停止监听</h3><p>当 <code>watchEffect</code> 在组件的 <a href="https://v3.cn.vuejs.org/guide/composition-api-setup.html">setup()</a> 函数或<a href="https://v3.cn.vuejs.org/guide/composition-api-lifecycle-hooks.html">生命周期钩子</a>被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。</p><p>在一些情况下，也可以显式调用返回值以停止侦听：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// later</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="清除副作用"><a href="#清除副作用" class="headerlink" title="清除副作用"></a>清除副作用</h3><p>有时副作用函数会执行一些异步的副作用，这些响应需要在其失效时清除 (即完成之前状态已改变了) 。所以侦听副作用传入的函数可以接收一个 <code>onInvalidate</code> 函数作入参，用来注册清理失效时的回调。当以下情况发生时，这个失效回调会被触发：</p><ul><li>副作用即将重新执行时</li><li>侦听器被停止 (如果在 <code>setup()</code> 或生命周期钩子函数中使用了 <code>watchEffect</code>，则在组件卸载时)</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">onInvalidate</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">performAsyncOperation</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// id has changed or watcher is stopped.</span>    <span class="token comment">// invalidate previously pending async operation</span>    token<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>我们之所以是通过传入一个函数去注册失效回调，而不是从回调返回它，是因为返回值对于异步错误处理很重要。</p><p>在执行数据请求时，副作用函数往往是一个异步函数：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">onInvalidate</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 我们在Promise解析之前注册清除函数</span>  data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>我们知道异步函数都会隐式地返回一个 Promise，但是清理函数必须要在 Promise 被 resolve 之前被注册。另外，Vue 依赖这个返回的 Promise 来自动处理 Promise 链上的潜在错误。</p><h3 id="副作用刷新时机"><a href="#副作用刷新时机" class="headerlink" title="副作用刷新时机"></a>副作用刷新时机</h3><p>Vue 的响应性系统会缓存副作用函数，并异步地刷新它们，这样可以避免同一个“tick” 中多个状态改变导致的不必要的重复调用。在核心的具体实现中，组件的 <code>update</code> 函数也是一个被侦听的副作用。当一个用户定义的副作用函数进入队列时，默认情况下，会在所有的组件 <code>update</code> <strong>前</strong>执行：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      count    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在这个例子中：</p><ul><li><code>count</code> 会在初始运行时同步打印出来</li><li>更改 <code>count</code> 时，将在组件<strong>更新前</strong>执行副作用。</li></ul><p>如果需要在组件更新(例如：当与<a href="https://v3.cn.vuejs.org/guide/composition-api-template-refs.html#%E4%BE%A6%E5%90%AC%E6%A8%A1%E6%9D%BF%E5%BC%95%E7%94%A8">模板引用</a>一起)<strong>后</strong>重新运行侦听器副作用，我们可以传递带有 <code>flush</code> 选项的附加 <code>options</code> 对象 (默认为 <code>&#39;pre&#39;</code>)：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 在组件更新后触发，这样你就可以访问更新的 DOM。</span><span class="token comment">// 注意：这也将推迟副作用的初始运行，直到组件的首次渲染完成。</span><span class="token function">watchEffect</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    flush<span class="token operator">:</span> <span class="token string">'post'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>flush</code> 选项还接受 <code>sync</code>，这将强制效果始终同步触发。然而，这是低效的，应该很少需要。</p><p>从 Vue 3.2.0 开始，<code>watchPostEffect</code> 和 <code>watchSyncEffect</code> 别名也可以用来让代码意图更加明显。</p><h3 id="监听器调试"><a href="#监听器调试" class="headerlink" title="监听器调试"></a>监听器调试</h3><p>与computed差不多</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F; 监听单一源export declare function watch&lt;T, Immediate extends Readonly&lt;boolean&gt; &#x3D; false&gt;(source: WatchSource&lt;T&gt;, cb: WatchCallback&lt;T, Immediate extends true ? T | undefined : T&gt;, options?: WatchOptions&lt;Immediate&gt;): WatchStopHandle;export declare type WatchSource&lt;T &#x3D; any&gt; &#x3D; Ref&lt;T&gt; | ComputedRef&lt;T&gt; | (() &#x3D;&gt; T);export declare type WatchCallback&lt;V &#x3D; any, OV &#x3D; any&gt; &#x3D; (value: V, oldValue: OV, onInvalidate: InvalidateCbRegistrator) &#x3D;&gt; any;declare type InvalidateCbRegistrator &#x3D; (cb: () &#x3D;&gt; void) &#x3D;&gt; void;export declare interface WatchOptions&lt;Immediate &#x3D; boolean&gt; extends WatchOptionsBase &#123;    immediate?: Immediate;    deep?: boolean;&#125;</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 监听多个源</span><span class="token keyword">export</span> declare <span class="token keyword">function</span> watch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">MultiWatchSources</span><span class="token punctuation">,</span> Immediate <span class="token keyword">extends</span> <span class="token class-name">Readonly</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">(</span>sources<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cb<span class="token operator">:</span> WatchCallback<span class="token operator">&lt;</span>MapSources<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">></span><span class="token punctuation">,</span> MapSources<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Immediate<span class="token operator">>></span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token operator">&lt;</span>Immediate<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle<span class="token punctuation">;</span></code></pre><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><h4 id="侦听单一源"><a href="#侦听单一源" class="headerlink" title="侦听单一源"></a>侦听单一源</h4><p>侦听器数据源可以是一个具有返回值的 getter 函数，也可以直接是一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">ref</a>或computedRef</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 侦听一个 getter</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接侦听一个 ref</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听computedRef</span><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">watch</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">plusOne<span class="token punctuation">,</span> prevplusOne</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">,</span> prevplusOne<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="侦听多个源"><a href="#侦听多个源" class="headerlink" title="侦听多个源"></a>侦听多个源</h4><p>侦听器还可以使用数组以同时侦听多个源：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fooRef<span class="token punctuation">,</span> barRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>prevFoo<span class="token punctuation">,</span> prevBar<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>如果你在同一个函数里同时改变这些被侦听的来源，侦听器仍只会执行一次：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValues<span class="token punctuation">,</span> prevValues</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValues<span class="token punctuation">,</span> prevValues<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">changeValues</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'John'</span>    lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Smith'</span>    <span class="token comment">// 打印 ["John", "Smith"] ["", ""]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeValues <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意多个同步更改只会触发一次侦听器。</p><p>通过更改设置 <code>flush: &#39;sync&#39;</code>，我们可以为每个更改都强制触发侦听器，尽管这通常是不推荐的。或者，可以用 <a href="https://v3.cn.vuejs.org/api/global-api.html#nexttick">nextTick</a> 等待侦听器在下一步改变之前运行。例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">changeValues</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'John'</span> <span class="token comment">// 打印 ["John", ""] ["", ""]</span>  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Smith'</span> <span class="token comment">// 打印 ["John", "Smith"] ["John", ""]</span><span class="token punctuation">&#125;</span></code></pre><h4 id="侦听响应式对象"><a href="#侦听响应式对象" class="headerlink" title="侦听响应式对象"></a>侦听响应式对象</h4><p>使用侦听器来比较一个数组或对象的值，这些值是响应式的，要求它有一个由值构成的副本。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> prevNumbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> prevNumbers<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// logs: [1,2,3,4,5] [1,2,3,4]</span></code></pre><p>尝试检查深度嵌套对象或数组中的 property 变化时，仍然需要 <code>deep</code> 选项设置为 true。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attributes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not deep'</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">,</span> prevState<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'deep'</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">,</span> prevState<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Alex'</span> <span class="token comment">// 日志: "deep" "Alex" "Alex"</span></code></pre><p>然而，侦听一个响应式对象或数组将始终返回该对象的当前值和上一个状态值的引用。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。这可以通过诸如 <a href="https://lodash.com/docs/4.17.15#cloneDeep">lodash.cloneDeep</a> 这样的实用工具来实现。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attributes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">,</span> prevState<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Alex'</span> <span class="token comment">// 日志: "Alex" ""</span></code></pre><h3 id="与watchEffect的区别"><a href="#与watchEffect的区别" class="headerlink" title="与watchEffect的区别"></a>与watchEffect的区别</h3><p>与 <a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#watcheffect">watchEffect</a> 比较，<code>watch</code> 允许我们：</p><ul><li>懒执行副作用；</li><li>更具体地说明什么状态应该触发侦听器重新运行；</li><li>访问侦听状态变化前后的值。</li></ul><h3 id="与-watchEffect-共享的行为"><a href="#与-watchEffect-共享的行为" class="headerlink" title="与 watchEffect 共享的行为"></a>与 <code>watchEffect</code> 共享的行为</h3><p><code>watch</code> 与 <a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#watcheffect"><code>watchEffect</code></a>共享<a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E5%81%9C%E6%AD%A2%E4%BE%A6%E5%90%AC">停止侦听</a>，<a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E6%B8%85%E9%99%A4%E5%89%AF%E4%BD%9C%E7%94%A8">清除副作用</a> (相应地 <code>onInvalidate</code> 会作为回调的第三个参数传入)、<a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E5%89%AF%E4%BD%9C%E7%94%A8%E5%88%B7%E6%96%B0%E6%97%B6%E6%9C%BA">副作用刷新时机</a>和<a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E4%BE%A6%E5%90%AC%E5%99%A8%E8%B0%83%E8%AF%95">侦听器调试</a>行为。</p><h3 id="与computed的区别"><a href="#与computed的区别" class="headerlink" title="与computed的区别"></a>与computed的区别</h3><p>对于Computed： </p><ul><li><p>它⽀持缓存，只有依赖的数据发⽣了变化，才会重新计算 </p></li><li><p>不⽀持异步，当Computed中有异步操作时，⽆法监听数据的变化 </p></li><li><p>computed的值会默认⾛缓存，计算属性是基于它们的响应式依赖进⾏缓存的，也就是基于data声 明过，或者⽗组件传递过来的props中的数据进⾏计算的。</p></li><li><p> 如果⼀个属性是由其他属性计算⽽来的，这个属性依赖其他的属性，⼀般会使⽤computed </p></li><li><p>如果computed属性的属性值是函数，那么默认使⽤get⽅法，函数的返回值就是属性的属性值；在 computed中，属性有⼀个get⽅法和⼀个set⽅法，当数据发⽣变化时，会调⽤set⽅法。</p></li></ul><p> 对于Watch： </p><ul><li>它不⽀持缓存，数据变化时，它就会触发相应的操作 </li><li>⽀持异步监听 监听的函数接收两个参数，第⼀个参数是最新的值，第⼆个是变化之前的值 </li><li>当⼀个属性发⽣变化时，就需要执⾏相应的操作 监听数据必须是data中声明的或者⽗组件传递过来的props中的数据，当发⽣变化时，会触发其他 操作，函数有两个的参数：<ul><li>immediate：副作用刷新时机 </li><li>deep：深度监听，发现数据内部的变化，在复杂数据类型中使⽤，例如数组中的对象发⽣变 化。需要注意的是，deep⽆法监听到数组和对象内部的变化。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。这可以通过诸如 <a href="https://lodash.com/docs/4.17.15#cloneDeep">lodash.cloneDeep</a> 这样的实用工具来实现。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟DOM 这次我可会讲了</title>
      <link href="/2021/12/18/%E8%99%9A%E6%8B%9FDOM-%E8%BF%99%E6%AC%A1%E6%88%91%E5%8F%AF%E4%BC%9A%E8%AE%B2%E4%BA%86/"/>
      <url>/2021/12/18/%E8%99%9A%E6%8B%9FDOM-%E8%BF%99%E6%AC%A1%E6%88%91%E5%8F%AF%E4%BC%9A%E8%AE%B2%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/18/FndVgrY5BjDbtem.jpg" alt="微信图片_20211218203818.jpg"></p><p>在<strong>vue是如何组合起来的</strong>文章中我们知道虚拟DOM就是以对象形式描述的DOM,也了解了啥时候调用patch算法进行虚拟Dom比对。</p><p>但之前都是用简化版的去实现，具体怎么比对，<a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/vnode.ts">Vnode</a>长啥样，我们这就来学学。</p><p>再补充一下，变化侦测只通知到组件级别。为了减小性能浪费，这也是产生Vnode的一个原因。</p><h2 id="Vnode长啥样"><a href="#Vnode长啥样" class="headerlink" title="Vnode长啥样"></a>Vnode长啥样</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode</span><span class="token operator">&lt;</span>  HostNode <span class="token operator">=</span> RendererNode<span class="token punctuation">,</span>  HostElement <span class="token operator">=</span> RendererElement<span class="token punctuation">,</span>  ExtraProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any <span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">SKIP</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>  type<span class="token operator">:</span> VNodeTypes  props<span class="token operator">:</span> <span class="token punctuation">(</span>VNodeProps <span class="token operator">&amp;</span> ExtraProps<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span>  key<span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> symbol <span class="token operator">|</span> <span class="token keyword">null</span>  ref<span class="token operator">:</span> VNodeNormalizedRef <span class="token operator">|</span> <span class="token keyword">null</span>  scopeId<span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span>  slotScopeIds<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>  children<span class="token operator">:</span> VNodeNormalizedChildren  component<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span>  dirs<span class="token operator">:</span> DirectiveBinding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>  transition<span class="token operator">:</span> TransitionHooks<span class="token operator">&lt;</span>HostElement<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span>  <span class="token comment">// DOM</span>  el<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span>  anchor<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// fragment anchor</span>  target<span class="token operator">:</span> HostElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// teleport target</span>  targetAnchor<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// teleport target anchor</span>  staticCount<span class="token operator">:</span> number  suspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span>  ssContent<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span>  ssFallback<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span>  shapeFlag<span class="token operator">:</span> number  patchFlag<span class="token operator">:</span> number  dynamicProps<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>  dynamicChildren<span class="token operator">:</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>  appContext<span class="token operator">:</span> AppContext <span class="token operator">|</span> <span class="token keyword">null</span>  memo<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>  isCompatRoot<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>  ce<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span></code></pre><p>根据Vnode的定义，可见其就是一个普通的对象。</p><h2 id="Vode的类型"><a href="#Vode的类型" class="headerlink" title="Vode的类型"></a>Vode的类型</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> type VNodeTypes <span class="token operator">=</span>  <span class="token operator">|</span> string  <span class="token operator">|</span> VNode  <span class="token operator">|</span> Component  <span class="token operator">|</span> <span class="token keyword">typeof</span> Text  <span class="token operator">|</span> <span class="token keyword">typeof</span> Static  <span class="token operator">|</span> <span class="token keyword">typeof</span> Comment  <span class="token operator">|</span> <span class="token keyword">typeof</span> Fragment  <span class="token operator">|</span> <span class="token keyword">typeof</span> TeleportImpl  <span class="token operator">|</span> <span class="token keyword">typeof</span> SuspenseImpl</code></pre><p>不同类型的Vnode之间其实只是有效属性不同，创建Vnode实例时，无效的属性会有默认赋值</p><p>可以创建不同类型的Vnode</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建文本节点</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVNode</span><span class="token punctuation">(</span>text<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">,</span> flag<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建静态节点</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createStaticVNode</span><span class="token punctuation">(</span>  <span class="token parameter">content<span class="token operator">:</span> string<span class="token punctuation">,</span>  numberOfNodes<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Static<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>  vnode<span class="token punctuation">.</span>staticCount <span class="token operator">=</span> numberOfNodes  <span class="token keyword">return</span> vnode<span class="token punctuation">&#125;</span><span class="token comment">// 创建注释节点</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createCommentVNode</span><span class="token punctuation">(</span>  text<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  asBlock<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> asBlock    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createBlock</span><span class="token punctuation">(</span>Comment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Comment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>终于到虚拟Dom的核心部分了</p><h3 id="patch作用"><a href="#patch作用" class="headerlink" title="patch作用"></a>patch作用</h3><p>对比两个Vnode之间的差异只是patch的一部分，这是手段，不是目的。patch是在现有的DOM上进行修改达到渲染视图的目的。所以要做三件事</p><ul><li>创建新增的节点</li><li>删除废弃的节点</li><li>修改更新的节点</li></ul><p>看看源码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> patch<span class="token operator">:</span> <span class="token function-variable function">PatchFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token parameter">n1<span class="token punctuation">,</span>    n2<span class="token punctuation">,</span>    container<span class="token punctuation">,</span>    anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    parentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    parentSuspense <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    isSVG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    slotScopeIds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    optimized <span class="token operator">=</span> __DEV__ <span class="token operator">&amp;&amp;</span> isHmrUpdating <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>n2<span class="token punctuation">.</span>dynamicChildren</span>  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">===</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// patching &amp; not same type, unmount old tree</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>      <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      n1 <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>patchFlag <span class="token operator">===</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">BAIL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      optimized <span class="token operator">=</span> <span class="token boolean">false</span>      n2<span class="token punctuation">.</span>dynamicChildren <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">&#125;</span> <span class="token operator">=</span> n2    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> Text<span class="token operator">:</span>        <span class="token function">processText</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> Comment<span class="token operator">:</span>        <span class="token function">processCommentNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> Static<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">mountStaticNode</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">patchStaticNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> Fragment<span class="token operator">:</span>        <span class="token function">processFragment</span><span class="token punctuation">(</span>          n1<span class="token punctuation">,</span>          n2<span class="token punctuation">,</span>          container<span class="token punctuation">,</span>          anchor<span class="token punctuation">,</span>          parentComponent<span class="token punctuation">,</span>          parentSuspense<span class="token punctuation">,</span>          isSVG<span class="token punctuation">,</span>          slotScopeIds<span class="token punctuation">,</span>          optimized        <span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">processElement</span><span class="token punctuation">(</span>            n1<span class="token punctuation">,</span>            n2<span class="token punctuation">,</span>            container<span class="token punctuation">,</span>            anchor<span class="token punctuation">,</span>            parentComponent<span class="token punctuation">,</span>            parentSuspense<span class="token punctuation">,</span>            isSVG<span class="token punctuation">,</span>            slotScopeIds<span class="token punctuation">,</span>            optimized          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">processComponent</span><span class="token punctuation">(</span>            n1<span class="token punctuation">,</span>            n2<span class="token punctuation">,</span>            container<span class="token punctuation">,</span>            anchor<span class="token punctuation">,</span>            parentComponent<span class="token punctuation">,</span>            parentSuspense<span class="token punctuation">,</span>            isSVG<span class="token punctuation">,</span>            slotScopeIds<span class="token punctuation">,</span>            optimized          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">;</span><span class="token punctuation">(</span>type <span class="token keyword">as</span> <span class="token keyword">typeof</span> TeleportImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>            n1 <span class="token keyword">as</span> TeleportVNode<span class="token punctuation">,</span>            n2 <span class="token keyword">as</span> TeleportVNode<span class="token punctuation">,</span>            container<span class="token punctuation">,</span>            anchor<span class="token punctuation">,</span>            parentComponent<span class="token punctuation">,</span>            parentSuspense<span class="token punctuation">,</span>            isSVG<span class="token punctuation">,</span>            slotScopeIds<span class="token punctuation">,</span>            optimized<span class="token punctuation">,</span>            internals          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">;</span><span class="token punctuation">(</span>type <span class="token keyword">as</span> <span class="token keyword">typeof</span> SuspenseImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>            n1<span class="token punctuation">,</span>            n2<span class="token punctuation">,</span>            container<span class="token punctuation">,</span>            anchor<span class="token punctuation">,</span>            parentComponent<span class="token punctuation">,</span>            parentSuspense<span class="token punctuation">,</span>            isSVG<span class="token punctuation">,</span>            slotScopeIds<span class="token punctuation">,</span>            optimized<span class="token punctuation">,</span>            internals          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Invalid VNode type:'</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">typeof</span> type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// set ref</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parentComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>ref<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> n2 <span class="token operator">||</span> n1<span class="token punctuation">,</span> <span class="token operator">!</span>n2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h4><p>这通常发生在首次渲染中。因为在首次渲染中，oldVnode不存在任何节点。</p><p>还有一种情况是当oldVnode和vnode完全不是同一个节点时，vnode是一个全新的节点，而oldNode是废弃的节点。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// patching &amp; not same type, unmount old tree</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>  <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> processText<span class="token operator">:</span> <span class="token function-variable function">ProcessTextOrCommentFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostInsert</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateText</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        container<span class="token punctuation">,</span>        anchor      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el<span class="token operator">!</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token operator">!==</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">hostSetText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> string<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>在vnode中不存在的节点都是废弃的，需要删除</p><h4 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h4><h5 id="静态节点"><a href="#静态节点" class="headerlink" title="静态节点"></a>静态节点</h5><p>静态节点不会因状态的变化而发生变化，比对时可跳过更新操作</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">patchStaticNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token parameter">n1<span class="token operator">:</span> VNode<span class="token punctuation">,</span>  n2<span class="token operator">:</span> VNode<span class="token punctuation">,</span>  container<span class="token operator">:</span> RendererElement<span class="token punctuation">,</span>  isSVG<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// static nodes are only patched during dev for HMR</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token operator">!==</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> anchor <span class="token operator">=</span> <span class="token function">hostNextSibling</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>anchor<span class="token operator">!</span><span class="token punctuation">)</span>    <span class="token comment">// remove existing</span>    <span class="token function">removeStaticNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    <span class="token comment">// insert new</span>    <span class="token punctuation">;</span><span class="token punctuation">[</span>n2<span class="token punctuation">.</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>anchor<span class="token punctuation">]</span> <span class="token operator">=</span> hostInsertStaticContent<span class="token operator">!</span><span class="token punctuation">(</span>      n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> string<span class="token punctuation">,</span>      container<span class="token punctuation">,</span>      anchor<span class="token punctuation">,</span>      isSVG    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el    n2<span class="token punctuation">.</span>anchor <span class="token operator">=</span> n1<span class="token punctuation">.</span>anchor  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="新虚拟节点有文本属性"><a href="#新虚拟节点有文本属性" class="headerlink" title="新虚拟节点有文本属性"></a>新虚拟节点有文本属性</h5><p>当两个虚拟节点都不是静态节点时且有不同属性时，要以新的为准，如果新虚拟节点有文本属性可直接替换</p><h5 id="新虚拟节点无文本属性"><a href="#新虚拟节点无文本属性" class="headerlink" title="新虚拟节点无文本属性"></a>新虚拟节点无文本属性</h5><p>如果新虚拟节点无文本属性，两个都有children还要进行更细致的比对，若新节点无children,说明是空节点，将旧节点也变为空节点。</p><h5 id="更新策略-diff算法"><a href="#更新策略-diff算法" class="headerlink" title="更新策略(diff算法)"></a>更新策略(diff算法)</h5><h6 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h6><p>当在oldChildren中没有找到与本次循环所指向的新子节点相同的节点，需要执行创建节点操作。</p><p>将创建的节点插入到oldChildren所以未处理的节点前面</p><h6 id="移动子节点"><a href="#移动子节点" class="headerlink" title="移动子节点"></a>移动子节点</h6><p>当比对发现是同一节点但位置不同时，需要移动到所有未处理的节点前面</p><h6 id="删除子节点"><a href="#删除子节点" class="headerlink" title="删除子节点"></a>删除子节点</h6><p>遍历后删除所有标记未处理的节点</p><h6 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h6><p>通常情况下，并不是所有子节点的位置都会发生移动，所以可以采用一下4种查找方式进行优化,注意查找的范围都是在未处理数组的前面</p><ul><li><p>新前与旧前</p></li><li><p>新后与旧后</p></li><li><p>新后与旧前</p></li><li><p>新前与旧后</p></li></ul><p>如果以上4种方式都不行再采用循环的方式</p><h6 id="如何发现哪些节点是未处理的"><a href="#如何发现哪些节点是未处理的" class="headerlink" title="如何发现哪些节点是未处理的"></a>如何发现哪些节点是未处理的</h6><p>建立四个变量：oldStartIdx、oldEndInx、newStartInx、newEndInx</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartInx <span class="token operator">&lt;=</span> oldEndInx <span class="token operator">&amp;&amp;</span> newStartInx <span class="token operator">&lt;=</span> newEndInx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 更新操作</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newStartInx <span class="token operator">&lt;=</span> newEndInx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 范围内都是新增节点</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartInx <span class="token operator">&lt;=</span> oldEndInx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 范围内都是废弃节点</span><span class="token punctuation">&#125;</span></code></pre><p>我觉得这哥们讲的挺好的</p><p><a href="https://zhuanlan.zhihu.com/p/372644149">从createApp开始的首屏渲染</a></p><p><a href="https://zhuanlan.zhihu.com/p/372671989">Vue3源码分析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊nextTick</title>
      <link href="/2021/12/17/%E8%81%8A%E8%81%8AnextTick/"/>
      <url>/2021/12/17/%E8%81%8A%E8%81%8AnextTick/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/17/P41XuvdVNpbt2E7.jpg" alt="微信图片_20211217195755.jpg"></p><h2 id="来几个小需求"><a href="#来几个小需求" class="headerlink" title="来几个小需求"></a>来几个小需求</h2><p>在给变量赋值后获取元素的内容</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"beforeChanged"</span><span class="token punctuation">)</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  msg<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'changed'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>控制台打印的是<code>beforeChanged</code>，而我们想要的结果是<code>changed</code>.</p><p>再如果我们想要在给变量赋值后立即调用子组件的方法获取变化后的数据，同样数据为旧值</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> 子组件<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"beforeChanged"</span><span class="token punctuation">)</span><span class="token keyword">let</span> msgRef<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  msg<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'changed'</span>  msgRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 控制台打印beforeChanged</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>TestNextTick ref<span class="token operator">=</span><span class="token string">"msgRef"</span> <span class="token operator">:</span>msg<span class="token operator">=</span><span class="token string">"msg"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件 TestNextTick</span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">const</span> props<span class="token operator">=</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    getMsg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="异步更新机制"><a href="#异步更新机制" class="headerlink" title="异步更新机制"></a>异步更新机制</h2><blockquote><p><code>Vue</code>在更新DOM时是异步执行的。只要监听到数据变化时，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个watcher被多次触发，只会被推入队列中一次。然后，在下一个事件循环中，<code>Vue</code>刷新队列并执行实际工作。<code>Vue2.x</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver </code>和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。<code>Vue3</code>不再支持<code>IE11</code>，所以<code>nextTick</code>直接使用Promise</p></blockquote><p>为了在数据更新操作之后操作DOM，<code>Vue</code>提供了<code>nextTick</code>函数方便我们使用</p><h3 id="使用nextTick"><a href="#使用nextTick" class="headerlink" title="使用nextTick"></a>使用<code>nextTick</code></h3><p>我们看看<a href="https://github.com/vuejs/vue-next/blob/03a7a73148a9e210a7889c7a2ecf925338735c70/packages/runtime-core/src/scheduler.ts#L42">源码</a>的格式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resolvedPromise<span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> currentFlushPromise<span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>  <span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> ComponentPublicInstance <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>  fn<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> currentFlushPromise <span class="token operator">||</span> resolvedPromise  <span class="token keyword">return</span> fn <span class="token operator">?</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">:</span> fn<span class="token punctuation">)</span> <span class="token operator">:</span> p<span class="token punctuation">&#125;</span></code></pre><p>通过源码我们可以灵活使用<code>nextTick</code>了,可以看到最终目的就是用 <code>Promise.resolve().then</code> 将 <code>fn</code> 转换成一个微任务，加入微任务队列</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 若我们直接调用nextTick，不传任何回调函数，即nextTick(),则fn为undefined，因此直接返回p</span><span class="token comment">// 而currentFlushPromise默认值为null,所以p=resolvedPromise,即p=Promise.resolve()</span><span class="token comment">// 由于p是异步的，所以我们可以这样去使用</span><span class="token keyword">const</span> <span class="token function-variable function">sampleFun</span><span class="token operator">=</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>msgRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">// 也可以这样去使用</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    msgRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过异步更新机制,nextTick()后面的代码会在nextTick()执行完后，再次获取执行权时才被执行</span><span class="token comment">// 此时数据已经更新</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 若在调用nextTick函数时传入一个回调函数fn，则fn会在Promise.resolve().then()中执行</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span> <span class="token comment">// changed</span>    msgRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// changed</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在会使用了，喝口水，我们继续看看是怎么实现的</p><p><a href="https://juejin.cn/post/6987710437651382280">nextTick源码解析</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说 <code>nextTick</code> 的实现主要利用了</p><ul><li>利用<code>Promise.resolve().then()</code>将任务推入 <code>Micro Task Queue</code> ，借助引擎的 <code>Event Loop</code> 机制处理队列中的任务</li><li>处理异步任务与回调，对于新添加的异步任务也递归的处理完成。这与引擎处理 <code>Task Queue</code> 的逻辑是一致的</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue双向绑定原理，这下终于说的出来了</title>
      <link href="/2021/12/16/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%EF%BC%8C%E8%BF%99%E4%B8%8B%E7%BB%88%E4%BA%8E%E8%AF%B4%E7%9A%84%E5%87%BA%E6%9D%A5%E4%BA%86/"/>
      <url>/2021/12/16/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%EF%BC%8C%E8%BF%99%E4%B8%8B%E7%BB%88%E4%BA%8E%E8%AF%B4%E7%9A%84%E5%87%BA%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/16/fCh5xy1DVnc63u4.jpg" alt="微信图片_20211216220421.jpg"></p><p>之前只会用不会说，这次扒个干净</p><h2 id="啥是双向绑定"><a href="#啥是双向绑定" class="headerlink" title="啥是双向绑定"></a>啥是双向绑定</h2><p>在 Vue 中 <code>:value</code> 实现了 <strong>模型到视图</strong> 的数据绑定，<code>@event</code> 实现了 <strong>视图到模型</strong> 的事件绑定：</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>以下是对<code>vue3</code> <code>v-model</code>变化的总体概述：</p><ul><li>非兼容：用于自定义组件时，<code>v-model</code>prop 和事件默认名称已更改：<ul><li>prop：<code>value</code> -&gt; <code>modelValue</code>；</li><li>事件：<code>input</code> -&gt; <code>update:modelValue</code>；</li></ul></li><li><strong>非兼容</strong>：<code>v-bind</code> 的 <code>.sync</code> 修饰符和组件的 <code>model</code> 选项已移除，可在 <code>v-model</code> 上加一个参数代替；</li><li><strong>新增</strong>：现在可以在同一个组件上使用多个 <code>v-model</code> 绑定；</li><li><strong>新增</strong>：现在可以自定义 <code>v-model</code> 修饰符。</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在<code>Vue 2.0</code>中使用 <code>v-model</code> 指令时必须使用名为 <code>value</code> 的 prop。如果开发者出于不同的目的需要使用其他的 prop，他们就不得不使用 <code>v-bind.sync</code>。此外，由于<code>v-model</code> 和 <code>value</code> 之间的这种硬编码关系的原因，产生了如何处理原生元素和自定义元素的问题。</p><p>在 <code>Vue 2.2</code> 中，引入了 <code>model</code> 组件选项，允许组件自定义用于 <code>v-model</code> 的 prop 和事件。但是，这仍然只允许在组件上使用一个 <code>v-model</code>。</p><p>在 <code>Vue 3</code> 中，双向数据绑定的 <code>API</code> 已经标准化，以减少开发者在使用 <code>v-model</code> 指令时的混淆，并且更加灵活。</p><h2 id="vue3用法"><a href="#vue3用法" class="headerlink" title="vue3用法"></a><code>vue3</code>用法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在 <code>3.x</code> 中，自定义组件上的 v-model 相当于传递了 <code>modelValue</code> prop 并接收抛出的 <code>update:modelValue</code> 事件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ChildComponent v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"pageTitle"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 是以下的简写<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ChildComponent  <span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"pageTitle"</span>  @update<span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"pageTitle = $event"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>我们可以看看编译器编译生成的渲染函数解析模板的结果</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> _component_ChildComponent <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">"ChildComponent"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_component_ChildComponent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    modelValue<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>pageTitle<span class="token punctuation">,</span>    <span class="token string">"onUpdate:modelValue"</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>pageTitle<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"modelValue"</span><span class="token punctuation">,</span> <span class="token string">"onUpdate:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>为了让它正常工作，子组件内的 <code>&lt;input&gt;</code> 必须：</p><ul><li>将其 <code>value</code> attribute 绑定到一个名叫 <code>modelValue</code> 的 prop 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>update:modelValue</code> 事件抛出</li></ul><p>写成代码之后是这样的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modelValue<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">update</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    儿子： <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> modelValue <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"modelValue"</span>      @input<span class="token operator">=</span><span class="token string">"update"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>需要注意的是父组件在定义接收变量时需要使用ref函数将其变为响应式的，不然其值不会改变</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">let</span> childMsg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    父亲：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> childMsg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>Child v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"childMsg"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h3 id="v-model-参数"><a href="#v-model-参数" class="headerlink" title="v-model 参数"></a><code>v-model</code> 参数</h3><p>若需要更改 <code>model</code> 的名称，现在我们可以为 <code>v-model</code> 传递一个<em>参数</em>，以作为组件内 <code>model</code> 选项的替代，这也可以作为 <code>.sync</code> 修饰符的替代，而且允许我们在自定义组件上使用多个 <code>v-model</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ChildComponent v<span class="token operator">-</span>model<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle"</span> v<span class="token operator">-</span>model<span class="token operator">:</span>content<span class="token operator">=</span><span class="token string">"pageContent"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 是以下的简写： <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ChildComponent  <span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle"</span>  @update<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle = $event"</span>  <span class="token operator">:</span>content<span class="token operator">=</span><span class="token string">"pageContent"</span>  @update<span class="token operator">:</span>content<span class="token operator">=</span><span class="token string">"pageContent = $event"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="v-model-修饰符"><a href="#v-model-修饰符" class="headerlink" title="v-model 修饰符"></a><code>v-model</code> 修饰符</h3><p><code>vue3</code>提供了自定义修饰符，添加到组件 <code>v-model</code> 的修饰符将通过 <code>modelModifiers</code> prop 提供给组件。当组件的 <code>created</code> 生命周期钩子触发时，<code>modelModifiers</code> prop会包含 自定义修饰符，且其值为 <code>true</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个将手机号码格式化为xxx-xxxx-xxx形式的修饰符formattingPhone</span><span class="token comment">// 父组件</span><span class="token operator">&lt;</span>child v<span class="token operator">-</span>model<span class="token punctuation">.</span>formattingPhone<span class="token operator">=</span><span class="token string">"phone"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>我们可以看看渲染函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> _component_child <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_component_child<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    modelValue<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>    <span class="token string">"onUpdate:modelValue"</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>phone<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span><span class="token punctuation">,</span>    modelModifiers<span class="token operator">:</span> <span class="token punctuation">&#123;</span> formattingPhone<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"modelValue"</span><span class="token punctuation">,</span> <span class="token string">"onUpdate:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modelValue<span class="token operator">:</span> String<span class="token punctuation">,</span>  modelModifiers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">update</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>modelModifiers<span class="token punctuation">.</span>formattingPhone<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 格式化操作</span><span class="token punctuation">&#125;</span><span class="token comment">// 当然为了方便数据库存储，传给父组件的值还是原本的手机号</span>    <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    儿子： <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> modelValue <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"modelValue"</span>      @input<span class="token operator">=</span><span class="token string">"update"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>对于带参数的 <code>v-model</code> 绑定，生成的 prop 名称将为 <code>arg + &quot;Modifiers&quot;</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token operator">&lt;</span>Child v<span class="token operator">-</span>model<span class="token operator">:</span>phone<span class="token punctuation">.</span>formattingPhone<span class="token operator">=</span>phone <span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 子组件</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  phone<span class="token operator">:</span> String<span class="token punctuation">,</span>  phoneModifiers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>恭喜你，看到这已经学会基本使用<code>vue3</code>版的<code>v-model</code>,光说不练假把式，去试试吧。</p><p>但是你以为这就可以了嘛。看看题目，我们原理还不知道啊。</p><p>其实<code>vue</code>中双向绑定是数据劫持+发布订阅模式实现的，我们之前有讨论过响应式原理了，它是采用<code>proxy</code>实现数据劫持</p><h2 id="谈谈观察者模式和发布订阅者模式"><a href="#谈谈观察者模式和发布订阅者模式" class="headerlink" title="谈谈观察者模式和发布订阅者模式"></a>谈谈观察者模式和发布订阅者模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式属于行为型模式。</p><p>用于定义对象间的一种一对多的依赖关系，当一个对象（被观察者）的状态发生改变时，所有依赖于它的对象（观察者）都得到通知并被自动更新。</p><p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p><p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><blockquote><p>在<a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>中，<strong>发布订阅</strong>是一种<a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/%E6%B6%88%E6%81%AF">消息</a><a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/%E8%8C%83%E5%BC%8F">范式</a>，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p></blockquote><p>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式</p><p><strong>发布者和订阅者是互相不知道对方的存在的，发布者只需要把消息发送到订阅器里面，订阅者只管接受自己需要订阅的内容</strong></p><p>由此发布订阅模式是一种<strong>松耦合</strong>的关系，watcher 和 Observer 之间是互相不受影响</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是时候认真学学十大排序算法了</title>
      <link href="/2021/12/14/%E6%98%AF%E6%97%B6%E5%80%99%E8%AE%A4%E7%9C%9F%E5%AD%A6%E5%AD%A6%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%BA%86/"/>
      <url>/2021/12/14/%E6%98%AF%E6%97%B6%E5%80%99%E8%AE%A4%E7%9C%9F%E5%AD%A6%E5%AD%A6%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/14/mTMnLyjoISEbWvC.jpg" alt="微信图片_20211214160145.jpg"><br>说来惭愧，到现在都还不能完全熟悉这十大排序算法，So It’s time to do it</p><p>上表</p><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n^2)</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>不稳定</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>1.5*n</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(n*logn)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(n*logn)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(n*logn)</td><td>不稳定</td></tr><tr><td>基数排序</td><td>O(d(n+r))</td><td>稳定</td></tr><tr><td>拓扑排序</td><td></td><td></td></tr><tr><td>计数排序</td><td></td><td></td></tr></tbody></table><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>稳定性指序列中有相同的元素，经过排序后，其相对位置不变</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>基本思想：相邻两个数进行比较，较大的数下沉，较小的数冒泡,即逆序便交换</p><p>过程：从后往前依次比较相邻两个数，每轮选出第 i 小元素放到对应位置</p><p>优化：设置标志位<code>flag</code>，每轮开始比较前将标志值设为<code>false</code>，若比较过程中发生交换，更改标志值为<code>true</code>。如果这轮比较结束标志值依旧为<code>false</code>，说明没有发生交换行为，元素顺序已排好，因此可直接返回。</p><p>时间复杂度：(n-1)+(n-2)+…+1,为等差数列 Sn=n(a1+an)/2=(n^2-n)/2,得时间复杂度为 O(n^2)</p><p>稳定性：在比较交换条件时，相同元素默认没有进行交换，所以该排序算法是稳定的</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>基本思想：遍历序列，每次选出最小的元素与第 I 轮对应位进行交换</p><p>过程： 每轮遍历前建立最小值索引<code>minIndex</code>，通过比较更新索引值，第 i 轮遍历比较结束交换下标为 i 和<code>minIndex</code>的元素</p><p>时间复杂度：(n-1)+(n-2)+…+1,为等差数列 Sn=n(a1+an)/2=(n^2-n)/2,得时间复杂度为 O(n^2)</p><p>稳定性：序列[5(1),8,5(2),2,9]，5(1)会和 2 交换，最终排序结果 5(1)和 5(2)的相对位置会被破坏，因此该算法不稳定。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>基本思想：采用减(减一)治思想，在要排序的一组数中，假定前 n-1 个数已经排好序，现在将第 n 个数插到前面的有序数列中，使得这 n 个数也是排好顺序的。如此反复循环，直到全部排好顺序。</p><p>过程：建立临时变量<code>cur</code>存储当前元素,从有序数组后面开始比较，移步赋值占空出来的位，直到找到第一个&lt;=当前元素的元素，插入到其后面</p><p>时间复杂度：(n-1)+(n-2)+…+1,为等差数列 Sn=n(a1+an)/2=(n^2-n)/2,得时间复杂度为 O(n^2)</p><p>稳定性：由于比较等于时，是插入到后面，所以相对位置没有改变，因此该排序算法稳定。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">straightInsertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">straightInsertionSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>基本思想：是插入排序的优化，将序列按增量划分为子序列分别进行插入排序，逐渐将增量减小,并重复上述过程。直至增量为 1,</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/44404"></p><p>过程：增量<code>incr</code>的初始值为序列的长度，每轮划分子序列前将增量/2</p><p>优化：在对子序列进行插入排序时，注意当前元素<code>cur</code>的最小值要大于本序列的起始元素的索引 i</p><p>稳定性：序列[28，17(1),17(2),49],排序后 17(1)和 17(2)的相对位置会改变，该算法不稳定</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> incr <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>incr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    incr <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>incr <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> incr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> incr<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> incr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> cur <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>cur <span class="token operator">-</span> incr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>cur <span class="token operator">-</span> incr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>cur <span class="token operator">-</span> incr<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          cur <span class="token operator">-=</span> incr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>基本思路：基于分治思想，将序列不断分半拆分，知道序列元素个数为 1 即有序，然后递归排序两个子序列，再将排好序的两个子数组合并</p><img src="https://s2.loli.net/2021/12/14/f8RvT9OVtxpo26C.jpg" alt="微信图片_20211214140112.jpg" style="zoom: 33%;" /><p>过程：建立递归排序函数<code>sort</code>和合并函数<code>merge</code>，在合并过程中建立临时数组<code>temp</code>存放排序后的序列，再替换<code>arr</code>对应位置的元素</p><p>时间复杂度：设数列长为 N，将数列分开成小数列一共要 logN 步，每步都是一个合并有序数列的过程，时间复杂度可以记为 O(N)，故一共为 O(N*logN)。</p><p>稳定性：排序后没有破坏相同元素的相对位置，故该排序算法稳定</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> lf <span class="token operator">=</span> left<span class="token punctuation">,</span>    le <span class="token operator">=</span> mid<span class="token punctuation">,</span>    rf <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    re <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lf <span class="token operator">&lt;=</span> le <span class="token operator">&amp;&amp;</span> rf <span class="token operator">&lt;=</span> re<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>lf<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>rf<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>lf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      lf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>rf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      rf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lf <span class="token operator">&lt;=</span> le<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>lf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lf<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>rf <span class="token operator">&lt;=</span> re<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>rf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rf<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>基本思想：</p><ul><li>先从数列中取出一个数作为 key 值，一般取第一位</li><li>将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；</li><li>对左右两个小数列重复第二步，直至各区间只有 1 个数。</li></ul><p>过程：选取序列第一位元素为中轴，建立两个查找指针 i 和 j,i 从左往右扫描，j 从右往左扫描，i 遇到第一个&gt;=中轴的元素便停下来，j 遇到第一个&lt;=中轴的元素便停下来。当 i 和 j 都停下来时，交换 i 和 j 对应的元素，i 和 j 分别++，继续寻找，直到 j&gt;i,便将 j 对应的元素和中轴进行交换，以交换后中轴的位置为界，继续递归划分子序列</p><img src="https://s2.loli.net/2021/12/14/152eM4bfPLoNIzO.jpg" alt="微信图片_20211214143953.jpg" style="zoom: 25%;" /><p>时间复杂度：O(n*logn)</p><p>稳定性：序列[6,8,5(1),5(2),7]排序后 5(1)和 5(2)的相对位置会改变，该排序算法不稳定</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> r<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// j>i</span>  <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>基本思想: 基于变治思想，默认续写为完全二叉树，通过调整序列来达到大顶堆或小顶堆的效果</p><p>过程：从最后一个非叶子节点开始调整，直到根节点。调整时需要考虑到下层，因此需要循环</p><p>a.假设给定无序序列结构如下</p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192038651-934327647.png" alt="img" style="zoom:33%;" /><p>2.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的 6 结点），从左至右，从下至上进行调整。</p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192209433-270379236.png" alt="img" style="zoom:33%;" /><p>4.找到第二个非叶节点 4，由于[4,9,8]中 9 元素最大，4 和 9 交换。</p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192854636-1823585260.png" alt="img" style="zoom:33%;" /><p>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中 6 最大，交换 4 和 6。</p><p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217193347886-1142194411.png" alt="img"></p><p>此时，我们就将一个无需序列构造成了一个大顶堆。</p><p>时间复杂度: 每次重新恢复堆的时间复杂度为 O(logN)，共 N - 1 次重新恢复堆操作，再加上前面建立堆时 N / 2 次向下调整，每次调整时间复杂度也为 O(logN)。二次操作时间相加还是 O(N * logN)。</p><p>稳定性：比较过程中元素移动位置很错乱，该排序算法不稳定</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildBigHeap</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> k<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>稳定性：该算法是稳定的</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/101010010" alt="10101001"></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/99909" alt="9990"></p><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>基本思想：有向无环图</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>基本思想</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue是如何组合起来的</title>
      <link href="/2021/12/13/vue%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
      <url>/2021/12/13/vue%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/13/3xwHMI4YduZUBFf.jpg" alt="微信图片_20211213123526.jpg"></p><h2 id="我们编写的HTML如何被浏览器渲染到页面上的"><a href="#我们编写的HTML如何被浏览器渲染到页面上的" class="headerlink" title="我们编写的HTML如何被浏览器渲染到页面上的?"></a>我们编写的HTML如何被浏览器渲染到页面上的?</h2><p><img src="https://s2.loli.net/2021/12/12/bl43VrnNYxg7KCc.png" alt="image.png"></p><p><code>html</code>映射成一个个<code>DOM</code>节点，为了与DOM交互，我们可以编写<code>javascript</code></p><p><img src="https://s2.loli.net/2021/12/12/gkRbTyjnNquAeCz.png" alt="image.png"></p><p>但一个网页上有成千上万个<code>dom</code>节点，如果我们都要一个个去获取操作，那会很麻烦。</p><p>这就是<code>vue</code>这些框架诞生的意义，让它去帮助我们干这些重活，并进行大量<code>javascript</code>调用。</p><p>但如果搜索和更新需要遍历整个<code>DOM</code>树会让工作量变得很大，效率也会很慢，所以这就是<code>vue</code>和其他类似框架应用虚拟DOM的原因。</p><p><code>Virtual DOM</code>是用<code>javascript</code>对象表示DOM的一种形式，虚拟<code>dom</code>是由<code>vue</code>中的渲染函数生成返回的。</p><p><img src="https://s2.loli.net/2021/12/12/FdN5UH86lLVgOsG.png" alt="image.png"></p><p>当组件发生改变时，<code>Render</code>函数将从新运行，生成一个新的虚拟<code>dom</code>与旧的虚拟<code>dom</code>发送到<code>vue</code>中进行比对，以最高效的形式在网页上进行更新</p><p><img src="C:/Users/yangqixiang/AppData/Roaming/Typora/typora-user-images/image-20211212160843891.png" alt="image-20211212160843891"></p><h2 id="vue的三大模块"><a href="#vue的三大模块" class="headerlink" title="vue的三大模块"></a>vue的三大模块</h2><p>响应式模块、编译器模块和渲染模块是<code>vue</code>的核心三大模块</p><h3 id="响应式模块"><a href="#响应式模块" class="headerlink" title="响应式模块"></a>响应式模块</h3><p>我们之前学习了<code>vue</code>的响应式原理，大概总结就是：该模块允许我们创建<code>javascript</code>响应对象,并可以观察其变化，当使用这些对象的代码运行时，它们会被跟踪。当响应对象变化时，它们可以做出相应改变。</p><h3 id="编译器模块"><a href="#编译器模块" class="headerlink" title="编译器模块"></a>编译器模块</h3><p>它知道如何获取HTML模板,并将他们编译成渲染函数，浏览器可以只接收渲染函数。</p><h3 id="渲染模块"><a href="#渲染模块" class="headerlink" title="渲染模块"></a>渲染模块</h3><p>渲染模块包含在网页上渲染组件的三个不同阶段，分别为渲染阶段、挂载阶段、补丁阶段。</p><img src="C:/Users/yangqixiang/AppData/Roaming/Typora/typora-user-images/image-20211212162506313.png" alt="image-20211212162506313" style="zoom: 33%;" /><h4 id="渲染阶段"><a href="#渲染阶段" class="headerlink" title="渲染阶段"></a>渲染阶段</h4><p>该阶段负责通过渲染函数生成虚拟<code>dom</code>节点</p><h4 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h4><p>该阶段负责将虚拟<code>dom</code>通过调用<code>DOM</code> <code>API</code>创建网页</p><h4 id="补丁阶段"><a href="#补丁阶段" class="headerlink" title="补丁阶段"></a>补丁阶段</h4><p>该阶段渲染器负责将新旧虚拟DOM进行比对，并只更新网页变化的部分</p><h2 id="小运行流程"><a href="#小运行流程" class="headerlink" title="小运行流程"></a>小运行流程</h2><p>假设现在某个组件内有一个模板，以及在模板内部使用的响应式对象。</p><ol><li>首先，编译器模块的模板编译器将<code>html</code>模板转换为一个<code>render</code>函数</li><li>然后使用响应式模块初始化响应式对象</li><li>接下来进入渲染阶段，在渲染模块中调用<code>render</code>函数，函数引用了响应对象，这个对象被监视跟踪。<code>render</code>函数返回一个虚拟<code>DOM</code>节点。</li><li>在挂载阶段，调用<code>mount</code>函数使用 虚拟<code>dom</code>节点创建<code>web</code>页面。</li><li>之后，如果响应对象发生变化，由于它被监视跟踪，所以渲染器会再次调用<code>render</code>函数创建一个新的虚拟<code>dom</code>节点</li><li>渲染器将新旧节点发到<code>patch</code>函数中进行比对，然后只更新改变的部分</li></ol><h2 id="vue3-Template-explorer"><a href="#vue3-Template-explorer" class="headerlink" title="vue3 Template explorer"></a>vue3 Template explorer</h2><p>左边是<code>HTML</code>模板，右边是实时编译的<code>render</code>函数,右上方可提供多种选项的编译方式</p><p><img src="https://s2.loli.net/2021/12/12/7KhzBRXYAj8gcUq.png" alt="image.png"></p><p>如果编译器没有提示，虚拟DOM渲染器只看到整个<code>DOM</code>树，并不知道哪部分会改变。</p><p>编译器的工作就是提供这些信息，让虚拟<code>dom</code>可以直接定位到正确的动态节点上。</p><p>编译器运用了块的思想，将模板的根变成一个块，注意右边的<code>_openBlock</code>函数，当这个块打开时，会检查其中的动态子节点，有/*Text*/类似标注的会被跟踪，并加入当前打开的<code>block</code>作为动态节点。</p><p>在整个渲染函数调用之后，根会有一个额外的属性称为动态子节点，其值只包含动态部分的节点</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   </code></pre><p>上面的代码中，<code>span</code>就是<code>div</code>这个块的动态子节点</p><h2 id="来个mini-vue"><a href="#来个mini-vue" class="headerlink" title="来个mini-vue"></a>来个mini-vue</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.red</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.green</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// render function</span>  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return vdom</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      tag<span class="token punctuation">,</span>      props<span class="token punctuation">,</span>      children<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vdom<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> vdom<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>            key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            vdom<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> vdom<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdom<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vdom<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        vdom<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vdom<span class="token punctuation">.</span>el <span class="token operator">=</span> el<span class="token punctuation">;</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVdom<span class="token punctuation">,</span> newVdom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVdom<span class="token punctuation">.</span>tag <span class="token operator">===</span> newVdom<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>newVdom<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> oldProps <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> newProps <span class="token operator">=</span> newVdom<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> oldVdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">const</span> newChildren <span class="token operator">=</span> newVdom<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren <span class="token operator">!==</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 都是数组，源码中有使用key进行比较,现在假设没有key</span>          <span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// replace</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// reactivity</span>  <span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span>  <span class="token keyword">let</span> <span class="token function-variable function">watchEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span> <span class="token comment">// Set this as the activeEffect</span>    <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run it</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Unset it</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Only track if there is an activeEffect</span>      <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// run them all</span>        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 将嵌套对象包裹在自己的响应式代理中</span>          <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>        <span class="token string">"div"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"表哥，我出来了喔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">mountApp</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldVdom<span class="token punctuation">;</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        oldVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mount</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>        isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>oldVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldVdom <span class="token operator">=</span> newVdom<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">mountApp</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>哇哦，棒！但事实上，vue远没有这么简单，还有很多边界条件，包括diff算法比对等等,需要到<a href="https://github.com/vuejs/vue-next/tree/master/packages">源码</a>里一探究竟。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL到页面渲染数据这段时间内发生了啥事？聊聊浏览器缓存</title>
      <link href="/2021/12/11/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2021/12/11/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/11/K8bXThwnx7m53au.jpg" alt="微信图片_20211211125532.jpg"></p><p>先来一个总体流程图</p><p><img src="https://segmentfault.com/img/remote/1460000017184704"></p><p>大致过程如下：</p><ul><li><p>解析URL,检测浏览器缓存</p></li><li><p>DNS解析：将域名解析成IP地址</p></li><li><p>TCP三次握手建立连接</p></li><li><p>发送http请求</p></li><li><p>服务器处理请求并返回HTTP报文</p></li><li><p>浏览器解析渲染页面</p></li><li><p>断开连接：TCP四次挥手</p></li></ul><h2 id="那么，天天输入的URL到底是个啥？"><a href="#那么，天天输入的URL到底是个啥？" class="headerlink" title="那么，天天输入的URL到底是个啥？"></a>那么，天天输入的URL到底是个啥？</h2><ul><li>URL(Uniform Resource Locator)，顾名思义，统一资源定位符，也就是我们俗称的网址,它是通过一种语法规则让我们能从互联网上得到资源位置和访问这些资源的方法。</li></ul><p>那么它的语法规则是啥样嘞</p><ul><li>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;?&lt;参数&gt;#&lt;锚点&gt;</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/035928222c2b4baa8e6089f307d06dfd~tplv-k3u1fbpfcp-watermark.awebp"></p><h2 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h2><p>如果我们输入的是一个非URL结构的字符串，浏览器会用默认的搜索引擎搜索该字符串。输入格式正确的话，浏览器会解析出协议、主机、端口、路径、参数、锚点等信息，并构造一个HTTP请求。</p><p>在浏览器发送请求之前，为了减少发送的请求数，更快获取数据呈现给用户，会有一个命中强缓存和协商缓存的策略。</p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><h3 id="啥是浏览器缓存啊"><a href="#啥是浏览器缓存啊" class="headerlink" title="啥是浏览器缓存啊"></a>啥是浏览器缓存啊</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/21/1686e2735267bebb~tplv-t2oaga2asx-watermark.awebp"></p><p>跟图示一样，浏览器缓存其实就是浏览器根据发起或响应请求头中指定的缓存策略将得到的响应数据保存在本地，方便将来直接获取的一种行为。</p><h3 id="资源保存到本地究竟是保存到哪里？"><a href="#资源保存到本地究竟是保存到哪里？" class="headerlink" title="资源保存到本地究竟是保存到哪里？"></a>资源保存到本地究竟是保存到哪里？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e8553f944da4a4ea95333192a62f149~tplv-k3u1fbpfcp-watermark.awebp"></p><p>由图片可以看出，缓存位置主要分memory和disk两种,但并不是只有这两种方式</p><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。<strong>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</strong>。</p><p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h4 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h4><p><code>Memory Cache</code>是将资源缓存到内存中，读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭Tab页面，内存中的缓存也就被释放了。</p><p><code>Webkit</code>早已支持memory Cache,目前<code>Webkit</code>资源分为主资源和派生资源两类。主资源包括HTML页面或者下载项；派生资源包括HTML页面内嵌的图片或脚本链接，分别对应代码中<code>MainResourceLoader</code>和<code>SubresourceLoader</code>两个类。虽然<code>Webkit</code>支持<code>memoryCache</code>,但是也只是针对派生资源，它对应的类为<code>CachedResource</code>，用于保存原始数据（比如<code>CSS</code>，<code>JS</code>等，以及解码过的图片数据。</p><p>需要注意的事情是，内存缓存在缓存资源时并不关心返回资源的HTTP缓存头<code>Cache-Control</code>是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对<code>Content-Type</code>，<code>CORS</code>等其他特征做校验。</p><h4 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h4><p><code>Disk Cache</code>是将资源缓存到硬盘中，虽然读取速度慢，但是容量和存储时效都比<code>Memory Cache</code>好。</p><p>它也只能存储一些派生类资源文件，一般存储CSS文件。</p><p>因为css文件加载一次就可以渲染出来，我们不会频繁的去读取它，所以它不适合存在内存当中。</p><p>但js之类的脚本随时可能会执行，如果脚本在磁盘中，我们在执行脚本的时候需要从磁盘取到内存中，这样IO开销比较大，有可能导致浏览器失去响应。</p><h4 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h4><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂</strong>，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p><ul><li>所有的资源都能被推送，并且能够被缓存,但是 Edge 和 Safari 浏览器支持相对比较差</li><li>可以推送 no-cache 和 no-store 的资源</li><li>一旦连接被关闭，Push Cache 就被释放</li><li>多个页面可以使用同一个HTTP/2的连接，也就可以使用同一个Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的tab标签使用同一个HTTP连接。</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>你可以给其他域名推送资源</li></ul><h3 id="访问缓存优先级"><a href="#访问缓存优先级" class="headerlink" title="访问缓存优先级"></a>访问缓存优先级</h3><p>电脑缓存是当cpu在读取数据的时候，先是从缓存文件中查找，然后找到之后会自动读取，再输入到cpu进行处理，当然如果没有在缓存中找到对应的缓存文件的话，那么就会从内存中读取并且传输给cpu来处理。当然这样的话需要一定的时间所以会很慢。等cpu处理之后，就很快把这个数据所在的数据块保存在缓存文件中，这样的话在以后读取这项数据的时候就直接在缓存中进行，不要重复在内存中调用并读取数据了。</p><p>浏览器访问缓存也有优先级</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><p>如果以上四种缓存都没有命中的话，那么只能发起请求来获取资源了。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>之前就一直知道强缓存和协商缓存的鼎鼎大名，但一直没有花时间去真正的琢磨它。现在，咱就来好好学学。</p><p>强缓存就是让浏览器缓存该请求的响应资源，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</p><p>强缓存又分为两种<code>Expires</code>和<code>Cache-Control</code>,<strong>两者同时存在的话，Cache-Control优先级高于Expires</strong>；</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0f5e26bfdb749e6a9e339dfac224fe1~tplv-k3u1fbpfcp-watermark.awebp"></p><h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><ul><li>版本：HTTP/1.0</li><li>来源：存在于服务端返回的响应头中</li><li>语法：Expires: Wed, 22 Nov 2019 08:41:00 GMT</li><li>使用方式： 需要和Last-modified结合使用</li><li>缺点：<strong>Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效</strong>,Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</li></ul><h5 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h5><ul><li>版本：HTTP/1.1</li><li>来源：响应头和请求头</li><li>语法：Cache-Control:max-age=3600</li><li>使用方式： 可以组合使用多种指令</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3174701-8ff981603cdfded0?imageMogr2/auto-orient/strip%7CimageView2/2/w/562/format/webp"></p><ul><li>缺点：时间最终还是会失效</li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba010a1229f477b93e3432e5e8be509~tplv-k3u1fbpfcp-watermark.awebp"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be9fb406e1544f3a9c5676d91be15a8~tplv-k3u1fbpfcp-watermark.awebp"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40165c39fb75499db999177b9a07e353~tplv-k3u1fbpfcp-watermark.awebp"></p><h5 id="Last-Modified-响应头-，If-Modified-Since-请求头"><a href="#Last-Modified-响应头-，If-Modified-Since-请求头" class="headerlink" title="Last-Modified(响应头)，If-Modified-Since(请求头)"></a>Last-Modified(响应头)，If-Modified-Since(请求头)</h5><p>在浏览器第一次给服务器发送请求后，服务器会在响应头中加上<code>Last-Modified</code>这个字段。 浏览器接收到后，如果再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是服务器传来的最后修改时间。 服务器拿到请求头中的<code>If-Modified-Since</code>的字段后，其实会和这个服务器中该资源的最后修改时间<code>Last-Modified</code>对比,询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来。</p><p>但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code>。</p><h5 id="ETag-响应头-、If-None-Match-请求头"><a href="#ETag-响应头-、If-None-Match-请求头" class="headerlink" title="ETag(响应头)、If-None-Match(请求头)"></a>ETag(响应头)、If-None-Match(请求头)</h5><p><code>ETag</code>是服务器根据当前文件的内容，给文件生成的唯一标识，<strong>只要资源有变化，Etag就会重新生成</strong>。服务器通过响应头把这个值给浏览器。 浏览器接收到ETag的值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，并放到请求头中，然后发给服务器。</p><p>服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。</p><h6 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h6><ul><li>首先在精确度上，Etag要优于Last-Modified。</li></ul><p>Last-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。</p><ul><li>第二在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。</li><li>第三在优先级上，服务器校验优先考虑Etag</li></ul><h2 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h2><h3 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h3><blockquote><p>Cache-Control: no-cache</p></blockquote><p>对于频繁变动的资源，首先需要使用<code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><h3 id="不常变化的资源"><a href="#不常变化的资源" class="headerlink" title="不常变化的资源"></a>不常变化的资源</h3><blockquote><p>Cache-Control: max-age=31536000</p></blockquote><p>通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 <code>max-age=31536000</code> (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。<br> 在线提供的类库 (如 <code>jquery-3.3.1.min.js</code>, <code>lodash.min.js</code> 等) 均采用这个模式。</p><h2 id="用户行为对浏览器缓存的影响"><a href="#用户行为对浏览器缓存的影响" class="headerlink" title="用户行为对浏览器缓存的影响"></a>用户行为对浏览器缓存的影响</h2><p>所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：</p><ul><li>打开网页，地址栏输入地址： 查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求。</li><li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)。其次才是 disk cache。</li><li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code>(为了兼容，还带了 <code>Pragma: no-cache</code>),服务器直接返回 200 和最新内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计动态规划的通用技巧：数学归纳思想</title>
      <link href="/2021/12/10/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/"/>
      <url>/2021/12/10/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/10/lVhBHimRf7NrqdO.jpg" alt="微信图片_20211210233510.jpg"></p><h2 id="先放题目"><a href="#先放题目" class="headerlink" title="先放题目"></a>先放题目</h2><p>题目描述：给定一个无序的整数数组，找到其中最长上升子序列</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>输出：<span class="token number">4</span>解释：最长递增子序列是 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span>，因此长度为 <span class="token number">4</span> 。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">4</span></code></pre><p>示例 3：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><p>首先我们需要明白子序列的概念，子序列不等同于子串，子串一定是连续的，子序列不一定是连续。</p><h2 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h2><p>动态规划的核心设计思想是数学归纳法。</p><p>比如我们想证明一个数学结论，那么我们先假设这个结论在k&lt;n时成立，然后根据这个假设，想办法推导证明出k=n的时候结论也成立。如果证明的出来，说明这个结论对于k等于任何数都成立。</p><h2 id="解题推算"><a href="#解题推算" class="headerlink" title="解题推算"></a>解题推算</h2><p>在本题中，我们可以根据数学归纳法的设计思想，假设dp[0…i-1]都已经算出来了，然后根据前面的结果算出dp[i].</p><p>那我们定义dp[i]表示以nums[i]这个元素结尾的最长递增子序列的长度。</p><p>根据这个定义我们可以知道</p><ul><li>dp[i]的初始值都为1，因为以nums[i]结尾的最长递增子序列起码要包含它自己。</li><li>最终结果为dp数组的最大值，可以建立一个max变量保存当前最大值</li></ul><p>那我们如何根据dp[0…i-1]求出dp[i]嘞</p><ul><li>我们可以找前面那些结尾比nums[i]小的子序列，然后选择最长的那个加1即为dp[i]的值</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">let</span> dp<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="再来一刀"><a href="#再来一刀" class="headerlink" title="再来一刀"></a>再来一刀</h2><p>题目描述：给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。</p><p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p>注意：不允许旋转信封。</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：envelopes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">3</span>解释：最多信封的个数为 <span class="token number">3</span><span class="token punctuation">,</span> 组合为<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：envelopes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><h3 id="解题分析"><a href="#解题分析" class="headerlink" title="解题分析"></a>解题分析</h3><p>这道题其实就是最长递增子序列的变种，因为每次合法的嵌套相当于就是在找一个最长递增子序列，难点在于这次是在二维数组里面找。</p><p>我们先对宽度w进行升序排序，如果遇到w相同的情况，则按高度进行降序排序.因为两个宽度相同的信封不能相互包含，而逆序排序可以保证在W相同的数对中最多选取一个计入LIS。排序后，我们把所有的H作为一个数组进行计算LIS，结果就是这道题的答案</p><p>对给的数对进行排序</p><img src="https://s2.loli.net/2021/12/11/F2bocLCHA8W6XNj.jpg" alt="微信图片_20211211163508.jpg" style="zoom: 25%;" /><p>在h上寻找最长递增子序列</p><img src="https://s2.loli.net/2021/12/11/cvT4FuowBL1pqCs.jpg" alt="微信图片_20211211163512.jpg" style="zoom: 25%;" /><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxEnvelopes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">envelopes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    envelopes<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> envelopes<span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">let</span> dp<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="好兄弟，再来一刀"><a href="#好兄弟，再来一刀" class="headerlink" title="好兄弟，再来一刀"></a>好兄弟，再来一刀</h2><p>上题目，已麻目</p><p>题目描述：给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p>示例 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token number">6</span>解释：连续子数组 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 的和最大，为 <span class="token number">6</span> 。</code></pre><p>示例 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">1</span></code></pre><p>示例 3：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>输出：<span class="token number">23</span></code></pre><h3 id="解析分析"><a href="#解析分析" class="headerlink" title="解析分析"></a>解析分析</h3><p>好家伙，这怎么又跟数学归纳法联系上了呢</p><p>假设我们已经算出了dp[i-1],如何推导出dp[i]呢，这是个问题</p><p>dp[i]有两个选择，要么与前面的相邻子数组链接，要么不与它连接，自成一派，我们取结果更大的那个。</p><p>之前的dp都是数组，但这道题中dp[i]只与dp[i-1]有关系，我们可以压缩成两个变量dp0,dp1。</p><p>我们还要设一个变量res保存遍历过程中的最大值</p><h3 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dp0<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> dp1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span>dp0    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp1<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        dp0<span class="token operator">=</span>dp1        res<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>dp1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3响应性原理，咱深入一下下</title>
      <link href="/2021/12/10/vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2021/12/10/vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/10/Va3njs4qrHuAOKF.jpg"></p><h2 id="什么是响应式？"><a href="#什么是响应式？" class="headerlink" title="什么是响应式？"></a>什么是响应式？</h2><p>响应式是一种允许我们以声明式的方式去适应变化的编程范例。</p><p>这说明我们需要做到一下几点：</p><ul><li>当一个值被读取时进行跟踪</li><li>当某个值改变时进行检测</li><li>重新运行代码来读取原始值</li></ul><h2 id="了解反应性"><a href="#了解反应性" class="headerlink" title="了解反应性"></a>了解反应性</h2><p>看看这个简单的应用程序：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Price: $&#123;&#123; product.price &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Total: $&#123;&#123; product.price * product.quantity &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Taxes: $&#123;&#123; totalPriceWithTax &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      product<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        price<span class="token operator">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>        quantity<span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">totalPriceWithTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">.</span>quantity <span class="token operator">*</span> <span class="token number">1.03</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><code>Vue</code> 的 <code>Reactivity</code> 系统知道如果<code>price</code>发生变化，它应该做三件事：</p><ul><li>更新<code>price</code>我们网页上的值。</li><li>重新计算乘以 的表达式<code>price * quantity</code>，并更新页面。</li><li><code>totalPriceWithTax</code>再次调用该函数并更新页面。</li></ul><p>但是等等，<code>Vue</code> 的 Reactivity 系统如何知道在<code>price</code>更改时更新什么，以及它如何跟踪所有内容？</p><p><strong>这不是 JavaScript 编程通常的工作方式</strong></p><p>运行此代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity  <span class="token comment">// 10 right?</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">total is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><p>你认为它会打印什么？由于我们没有使用<code> Vue</code>，它将打印 10。</p><pre class="language-none"><code class="language-none">&gt;&gt; total is 10</code></pre><p>在 <code>Vue </code>中，我们希望<code>total</code>随时更新<code>price</code>或<code>quantity</code>。我们想要：</p><pre class="language-none"><code class="language-none">&gt;&gt; total is 40</code></pre><p>不幸的是，<code>JavaScript</code> 是过程性的，而不是反应性的，所以这在现实生活中是行不通的。为了使<code>total</code>响应式，我们必须使用 <code>JavaScript</code> 使事情表现得不同。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>正如您在上面的代码中看到的，为了开始构建反应性，我们需要保存我们计算 的方式<code>total</code>，以便我们可以在<code>price</code>或<code>quantity</code>更改时重新运行它。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先，我们需要某种方式来告诉我们的应用程序，“存储我将要运行的代码（效果），我可能需要你在其他时间运行它。” 然后我们要运行代码，如果<code>price</code>或<code>quantity</code>变量得到更新，再次运行存储的代码。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775377_1.opt.jpg?alt=media&token=c85ffe5b-ff63-4143-ae4e-b1f52b9c2eed" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775377_1.opt.jpg?alt=media&amp;token=c85ffe5b-ff63-4143-ae4e-b12e52b"></p><p>我们可以通过记录函数（效果）来做到这一点，以便我们可以再次运行它。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity <span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Remember this in case we want to run it later</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Also go ahead and run it</span></code></pre><p>为了定义<code>track</code>，我们需要一个地方来存储我们的效果，我们可能有很多。我们将创建一个名为 的变量<code>dep</code>，作为依赖项。我们称之为依赖是因为通常在观察者设计模式中，依赖有订阅者（在我们的例子中是效果），当对象改变状态时会得到通知。我们可能会像我们在本教程的 <code>Vue 2</code> 版本中所做的那样，使依赖成为一个具有订阅者数组的类。但是，由于它需要存储的只是一组效果，我们可以简单地创建一个<strong>Set</strong>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Our object tracking a list of effects</span></code></pre><p>然后我们的<code>track</code> 函数可以简单地将我们的效果添加到这个集合中：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">track</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Store the current effect</span><span class="token punctuation">&#125;</span></code></pre><p><code>JavaScript</code> <code>Array</code> 和<code> Set</code> 之间的区别在于 <code>Set</code> 不能有重复的值，并且它不像数组那样使用索引。</p><p>我们正在存储<code>effect</code>（在我们的例子中<code>&#123; total = price * quantity &#125;</code>），以便我们稍后运行它。这是此 <code>dep</code> 集的可视化：</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775378_2.opt.jpg?alt=media&token=8fb9b10b-c3f8-4075-9b17-c2dd263419f9" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763775378_2.opt.jpg?alt=media&amp;token=8fb9b10b-c3f8-4075-9b1634c29f"></p><p>让我们编写一个触发器函数来运行我们记录的所有内容。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><p>这将遍历我们存储在<code>dep</code>中的所有匿名函数并执行它们中的每一个。然后在我们的代码中，我们可以：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 10</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 40</span></code></pre><p>这里是完整的代码。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 10</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// => 40</span></code></pre><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763783549_3.opt.png?alt=media&token=298f665d-971f-40e3-a099-8b80c2f572f5" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763783549_3.opt.png?alt=media&amp;token=298f665d-971f-40e3-a0992f2f2f2f"></p><h2 id="问题：多个属性"><a href="#问题：多个属性" class="headerlink" title="问题：多个属性"></a>问题：多个属性</h2><p>我们可以根据需要继续跟踪效果，但是我们的反应式对象将具有不同的属性，并且这些属性每个都需要自己的<code>dep</code>（这是一组<code>effects</code>）。在这里查看我们的对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span></code></pre><p>我们的<code>price</code>财产需要它自己的 <code>dep </code>(set of <code>effects</code>)，而我们<code>quantity</code>需要它自己的<code>dep</code>(set of <code>effects</code>)。让我们构建我们的解决方案来正确记录这些。</p><h3 id="解决方案：depsMap"><a href="#解决方案：depsMap" class="headerlink" title="解决方案：depsMap"></a>解决方案：<code>depsMap</code></h3><p>当我们调用<code> track</code> 或<code> trigger</code> 时，我们现在需要知道目标对象中的哪个属性（<code>price</code>或<code>quantity</code>）。为此，我们将创建一个<code>depsMap</code>类型为<strong>Map</strong>（想想键和值）的<strong>。</strong> 以下是我们如何可视化它：</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763787347_4.opt.jpg?alt=media&token=cc2f2262-86f7-41e1-bc74-03d8da51cb75" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763787347_4.opt.jpg?alt=media&amp;token=cc2f2262-86f7-41e1-bc74-03d7"></p><p>请注意如果<code>depsMap</code>有一个键，它将是我们要添加（或跟踪）新的属性名称<code>effect</code>。因此，我们需要将此键发送到该<code>track</code>函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Make sure this effect is being tracked.</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dep (effects) that need to be run when this key (property) is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dep (effects) on this key yet</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dep</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the dep (effects) associated with this key</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// If they exist</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 10</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'quantity'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 15</span></code></pre><h2 id="问题：多个反应对象"><a href="#问题：多个反应对象" class="headerlink" title="问题：多个反应对象"></a>问题：多个反应对象</h2><p>这很有效，直到我们有多个需要跟踪效果的反应性对象（不仅仅是产品）。现在我们需要一种<code>depsMap</code>为每个对象（例如产品）存储 a 的方法。我们需要另一个 Map，每个对象一个，但关键是什么？如果我们使用<strong>WeakMap，</strong>我们实际上可以使用对象本身作为键。 **<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a>**是一个 JavaScript Map，它只使用对象作为键。例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">"example code to test"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ---> "example code to test"</span></code></pre><p>显然这不是我们要使用的代码，但我想向您展示我们如何通过<code>targetMap</code>使用我们的产品对象作为键。我们称我们的 WeakMap为<code>targetMap</code>是因为我们将考虑 target 我们正在瞄准的对象。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763789885_5.opt.jpg?alt=media&token=110bf30c-3b78-482f-bac2-30ca8403bfe0" alt="https://firebasestorage.googleapis.com/v0/b/vue-mastery.appspot.com/o/flamelink%2Fmedia%2F1580763789885_5.opt.jpg?alt=media&amp;token=110bf30c-3b78-482f-bac2-3bfe08"></p><p>当我们调用<code>track</code>或<code>trigger</code>我们现在需要知道我们的目标是哪个对象。因此，<code>target</code>当我们调用它时，我们将同时发送 the和 key。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it's updated</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We need to make sure this effect is being tracked.</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Get the current depsMap for this target</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no map.</span>    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create one</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dependencies (effects)</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dependency map</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">track</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 10</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token function">trigger</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// --> 15</span></code></pre><p>拍拍自己的后背。战斗已经进行了一半。</p><p>但是，目前我们仍然需要手动调用<code>track</code>和<code>trigger</code>。我们将学习如何使用<code>Reflect</code>和<code>Proxy</code>自动调用它们。</p><h3 id="解决方案：挂钩获取和设置"><a href="#解决方案：挂钩获取和设置" class="headerlink" title="解决方案：挂钩获取和设置"></a>解决方案：挂钩获取和设置</h3><p>我们需要一种方法来挂钩（或侦听）我们的反应式对象上的 <code>get</code> 和 <code>set</code> 方法。</p><p><strong>GET 属性 =&gt; 我们需要<code>track</code>当前<code>effect</code></strong></p><p><strong>SET 属性 =&gt; 我们需要<code>trigger</code>此属性的任何跟踪依赖项（效果）</strong></p><p>在<code>Vue3</code>中通过 <code>ES6</code>的<code>Reflect</code>和<code>Proxy</code>我们可以拦截获取和设置调用。以前在<code>Vue 2</code>中我们用 <code>ES5</code> 的<code>Object.defineProperty</code>做到了这一点。</p><h2 id="理解-ES6-反射"><a href="#理解-ES6-反射" class="headerlink" title="理解 ES6 反射"></a>理解 <code>ES6</code> 反射</h2><p>要打印出一个对象属性，我可以这样做：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token comment">// or </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> product<span class="token punctuation">[</span><span class="token string">'quantity'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>但是，我也可以使用 GET 对象的值<code>Reflect</code>。 <code>Reflect</code>允许您获取对象的属性。这只是我上面写的另一种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quantity is '</span> <span class="token operator">+</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>为什么使用<code>reflect</code>？好问题！因为它具有我们稍后需要的功能，所以请保持这种想法。</p><h2 id="了解-ES6-Proxy"><a href="#了解-ES6-Proxy" class="headerlink" title="了解 ES6 Proxy"></a>了解 <code>ES6</code> Proxy</h2><p>一个<code>Proxy</code>是另一个对象的占位符，默认情况下委托给该对象。因此，如果我运行以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>该<code>proxiedProduct</code>委托给<code>product</code>它返回<code>quantity</code>的值2。请注意<code>Proxy</code>的第二个参数<code>&#123;&#125;</code>？这称为  <code>handler</code>，我们可以向它传递捕获器<code>traps</code>用于定义代理对象上的自定义行为，如拦截<code>get</code>和<code>set</code>调用。下面是我们如何在我们的<code>handler</code>上设置<code>get</code>捕获器：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Not the value'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>在控制台中，我会看到：</p><p><em>Get was called</em></p><p><em>Not the value</em></p><p>我们重新编写了<code>get</code>访问属性值时返回的内容。我们可能应该返回实际值，我们可以这样做：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &lt;--- The target (our object) and key (the property name)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>请注意，该<code>get</code>函数有两个参数，<code>target</code>是我们的对象 ( <code>product</code>) 和<code>key</code>是我们试图获取的<code>property</code>，在本例中是<code>quantity</code>。现在我们看到：</p><p><em>Get was called with key =quantity</em></p><p><em>2</em></p><p>这也是我们可以使用 Reflect 并为其添加额外参数的地方。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &lt;--- notice the receiver</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token comment">// &lt;----</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>请注意，我们的 get 有一个额外的参数<code>receiver</code>，我们将其作为参数发送到<code>Reflect.get</code>. 这确保<code>this</code>当我们的对象从另一个对象继承值/函数时使用正确的值。这就是为什么我们总是在 <code>Proxy</code>内部使用<code>Reflect</code>，所以我们可以保留我们正在自定义的原始行为。</p><p>现在让我们添加一个 setter 方法，这里应该不会有什么大惊喜：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxiedProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Set was called with key = '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' and value = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>proxiedProduct<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedProduct<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>请注意，它<code>set</code>看起来与 get 非常相似，不同之处在于它使用<code>Reflect.set</code>接收<code>value</code>来设置<code>target</code>（产品）。我们预期的输出是：</p><p><em>Set was called with key = quantity and value = 4</em></p><p><em>Get was called with key = quantity</em></p><p><em>4</em></p><p>我们可以通过另一种方式封装这段代码，这就是您在<code>Vue 3</code> 源代码中看到的。首先，我们将这个代理代码包装在一个<code>reactive</code> 返回代理的函数中，如果您使用过 <code>Vue 3 Composition API</code>，它应该看起来很熟悉。然后我们将单独声明我们<code>handler</code>的<code>traps</code>并将它们发送到我们的代理中。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Get was called with key = '</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Set was called with key = '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' and value = '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- Returns a proxy object</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span></code></pre><p>这将返回与上面相同的结果，但现在我们可以轻松创建多个反应对象。</p><h2 id="结合代理-效果存储"><a href="#结合代理-效果存储" class="headerlink" title="结合代理+效果存储"></a>结合代理+效果存储</h2><p>如果我们使用创建反应式对象的代码，请记住：</p><p><strong>GET 属性 =&gt; 我们需要<code>track</code>当前的效果</strong></p><p><strong>SET 属性 =&gt; 我们需要这个属性的<code>trigger</code>任何跟踪依赖项 ( <code>effects</code>)</strong></p><p>我们可以开始想象我们需要调用的地方<code>track</code>和<code>trigger</code>上面的代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>        <span class="token comment">// Track</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Only if the value changes </span>        <span class="token comment">// Trigger</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>现在让我们把这两段代码放在一起：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it's updated</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We need to make sure this effect is being tracked.</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Get the current depsMap for this target</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no map.</span>    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create one</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// There is no dependencies (effects)</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Create a new Set</span>  <span class="token punctuation">&#125;</span>  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token comment">// Add effect to dependency map</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before updated quantity total = '</span> <span class="token operator">+</span> total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after updated quantity total = '</span> <span class="token operator">+</span> total<span class="token punctuation">)</span></code></pre><p>请注意我们如何不再需要调用<code>trigger</code>，<code>track</code>因为它们在我们的<code>get</code>和<code>set</code>方法中被正确调用。运行这段代码给我们：</p><p><em>before updated quantity total = 10</em></p><p><em>after updated quantity total = 15</em>*</p><h4 id="被代理的对象"><a href="#被代理的对象" class="headerlink" title="被代理的对象"></a>被代理的对象</h4><p>vue在内部跟踪所有已经被转成响应式的对象，所以它总是为同一个对象返回相同的代理</p><p>当从一个响应式代理中访问一个嵌套对象时，该对象在被返回之前也被转为一个代理</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将嵌套对象包裹在自己的响应式代理中</span>      <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><p>哇，我们已经走了很长一段路！在此代码可靠之前，只有一个错误需要修复。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Updated quantity to ='</span><span class="token operator">+</span>product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token comment">// track gets called when we GET a property on our reactive object,even if we're not in a effect</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><p>现在，只要反应性对象属性是<code>get</code> ，<code>track</code>就会被调用，这样不好。具体来说，我们应该只在<code>effect</code>内追踪函数。为此我们将引入一个<code>activeEffect</code>变量，它是现在正在运行中的<code>effect</code>。</p><p>接下来我们优化一下<code>effect</code>函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> activeEffect<span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">// The active effect running</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    activeEffect<span class="token operator">=</span>eff <span class="token comment">// Set this as the activeEffect</span>    <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Run it</span>    activeEffect<span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">// Unset it</span><span class="token punctuation">&#125;</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </code></pre><p>现在我们需要去更新<code>track</code>函数,让它去使用这个新的<code>activeEffect</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// Only track if there is an activeEffect</span>      <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>现在，我们来点高级的测试</p><p>首先我们需要了解一下<code>vue3</code>中的<code>ref</code>函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> r<span class="token operator">=</span><span class="token punctuation">&#123;</span>       <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> raw       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>newVal<span class="token operator">&amp;&amp;</span>raw<span class="token operator">!==</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               raw<span class="token operator">=</span>newVal              <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span></code></pre><p><code>vue3</code>就是这样做的，只不过源码更复杂一些，但这是核心</p><p>开始编写测试代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> salePrice<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  total <span class="token operator">=</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    salePrice<span class="token punctuation">.</span>value<span class="token operator">=</span>product<span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><p>到现在已经很可以了，但我们会想，既然联动改变，为什么不用<code>computed</code>属性呢，OK，那我们再试试</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那接下来的输出应该和之前一样</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="proxy-vs-原始值"><a href="#proxy-vs-原始值" class="headerlink" title="proxy vs 原始值"></a>proxy vs 原始值</h3><p>最佳实践是永远不要持有对原始对象的引用，而只使用响应式版本。因为被代理对象与原始对象不相等</p><pre class="language-vue" data-language="vue"><code class="language-vue">const obj &#x3D; &#123;&#125;const wrapped &#x3D; new Proxy(obj, handlers)console.log(obj &#x3D;&#x3D;&#x3D; wrapped) &#x2F;&#x2F; false</code></pre><p><code>Vue</code> 不会在 Proxy 中包裹数字或字符串等原始值，所以你仍然可以对这些值直接使用 <code>===</code> 来比较：</p><pre class="language-vue" data-language="vue"><code class="language-vue">const obj &#x3D; reactive(&#123;  count: 0&#125;)console.log(obj.count &#x3D;&#x3D;&#x3D; 0) &#x2F;&#x2F; true</code></pre><h3 id="如何让渲染响应变化"><a href="#如何让渲染响应变化" class="headerlink" title="如何让渲染响应变化"></a>如何让渲染响应变化</h3><p>一个组件的模板被编译成<code>render</code>函数，渲染函数创建<code>VNodes</code>，描述该组件应该如何被渲染。它被包裹在一个副作用里，允许<code>vue</code>在运行的时候跟踪被触达的<code>property</code>.</p><p>一个 <code>render</code> 函数在概念上与一个 <code>computed</code> <code>property </code>非常相似。<code>Vue</code> 并不确切地追踪依赖关系是如何被使用的，它只知道在函数运行的某个时间点上使用了这些依赖关系。如果这些 <code>property</code> 中的任何一个随后发生了变化，它将触发副作用再次运行，重新运行 <code>render</code> 函数以生成新的 <code>VNodes</code>。然后这些举动被用来对 <code>DOM</code> 进行必要的修改。</p><h2 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span><span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span> <span class="token comment">// Set this as the activeEffect</span>  <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run it</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Unset it</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Only track if there is an activeEffect</span>    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// run them all</span>      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> raw<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">&amp;&amp;</span> raw <span class="token operator">!==</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        raw <span class="token operator">=</span> newVal<span class="token punctuation">;</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//   let salePrice = ref(0);</span><span class="token comment">//   let total = 0;</span><span class="token comment">//   effect(() => &#123;</span><span class="token comment">//     total = salePrice.value * product.quantity;</span><span class="token comment">//   &#125;);</span><span class="token comment">//   effect(() => &#123;</span><span class="token comment">//     salePrice.value = product.price * 0.9;</span><span class="token comment">//   &#125;);</span><span class="token comment">//   console.log(</span><span class="token comment">//     `Before updated total (shouled be 9) =$&#123;total&#125; salePrice (should be 4.5) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token comment">//   product.quantity = 3;</span><span class="token comment">//   console.log(</span><span class="token comment">//     `After updated total (shouled be 13.5) =$&#123;total&#125; salePrice (should be 4.5) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token comment">//   product.price = 10;</span><span class="token comment">//   console.log(</span><span class="token comment">//     `After updated total (shouled be 27) =$&#123;total&#125; salePrice (should be 9) = $&#123;salePrice.value&#125; `</span><span class="token comment">//   );</span><span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Before updated total (shouled be 9) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 13.5) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After updated total (shouled be 27) =</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>恭喜你，太棒了！相信你看完后也对<code>vue3</code>的响应式有了一定的理解了，当然，本文只是针对<code>vue3</code>响应性的核心实现进行复现，真正的源码还是很复杂的，但现在你应该已经能看你的懂源码了。</p><p><a href="https://github.com/vuejs/vue-next/tree/master/packages/">源码地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划啊动态规划</title>
      <link href="/2021/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%95%8A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2021/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%95%8A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/09/ACbYJuRzwkFjrpo.jpg"></p><p>都说这种类型的题是最难的，我也有点惧怕，不过还是要迎难而上。</p><p>动态规划问题的一般形式就是求最值，求最值的核心就是穷举，暴力穷举会导致效率低下哎，所以我们需要一个备忘录来优化穷举过程。</p><p>而且，动态规划问题一定具备最优子结构，这样才能通过子问题的最值得到原问题的最值</p><p>动态规划三要素是重叠子问题（备忘录优化），最优子结构，状态转移方程，最难的一步就是构建出正确的状态转移方程。</p><p>动态规划采用自底向上的推理方法，从规模最小的一直推到规模最大的，所以动态规划一般都脱离了递归，采用循环迭代完成计算。</p><p>有了这些关于动态规划的了解后，我们来实战一下</p><h3 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h3><p>题目描述：给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">11</span>输出：<span class="token number">3</span> 解释：<span class="token number">11</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p><strong>示例 2：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">3</span>输出：<span class="token operator">-</span><span class="token number">1</span></code></pre><p><strong>示例 3：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">0</span>输出：<span class="token number">0</span></code></pre><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>求最值问题，又有最优子结构，可以立马想到动态规划。</p><p>最优子结构即子问题间必须相互独立，在该题中，比如我想求amount=11时的最少硬币数，假设有数值为1的硬币，其实就是在求amount=10的最少硬币数+1。由于硬币的数量是没有限制的，子问题之间没有相互制约，所以是相互独立的。</p><p>我们既然知道该题是动态规划的题了，那么就得认真思考一下它的状态转移方程了。</p><h4 id="状态转移方程三部曲"><a href="#状态转移方程三部曲" class="headerlink" title="状态转移方程三部曲"></a>状态转移方程三部曲</h4><h5 id="先确定状态"><a href="#先确定状态" class="headerlink" title="先确定状态"></a>先确定状态</h5><p>状态即变量，在该题中唯一的状态是目标金额amount</p><h5 id="确定dp函数定义"><a href="#确定dp函数定义" class="headerlink" title="确定dp函数定义"></a>确定dp函数定义</h5><p>函数dp(n)表示，当前的目标金额n，至少需要dp(n)个硬币凑出该金额</p><h5 id="确定选择并择优"><a href="#确定选择并择优" class="headerlink" title="确定选择并择优"></a>确定选择并择优</h5><p>对于每个状态，可以做出什么选择改变当前状态。在该题中，无论当前目标金额是多少，选择就是从coins中选一个硬币，然后将目标金额减去选择的硬币值。</p><p>好的，现在我们可以得到状态转移方程了</p><p><img src="https://s2.loli.net/2021/12/09/UOYrI7PzvlgLhKN.jpg"></p><h4 id="消除重叠子问题"><a href="#消除重叠子问题" class="headerlink" title="消除重叠子问题"></a>消除重叠子问题</h4><p>我们使用自底向上的dp table来消除重叠子问题，dp数组的定义与dp函数的定义类似</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>初始化一个长度为amount+1，每个元素初始值为amount+1的dp数组，因为组成amount的最大硬币数为amount(即全都是1的硬币数组成)，初始化为amount+1相当于正无穷，便于后续取最小值</p><p>将第0位元素赋值为1，便于后续最小值比对</p><p>遍历dp数组，每次相当于计算目标金额为i的最小硬币数</p><p>每次遍历都要从coins中选择硬币做为dp[i-coin]（即最优子结构）进行最小值比对</p><p>在选择硬币前还要判断子结构是否存在，即i&lt;coin是无效的</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> coin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> amount<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL到页面渲染数据这段时间内发生了啥事？聊聊域名系统</title>
      <link href="/2021/12/09/dns/"/>
      <url>/2021/12/09/dns/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/09/brsh17MXp3RQa65.jpg"></p><h3 id="DNS是个啥"><a href="#DNS是个啥" class="headerlink" title="DNS是个啥"></a>DNS是个啥</h3><ul><li>DNS(Domain Name System),顾名思义即域名系统，它被设计成一个联机分布式数据库系统，并采用客户服务器方式，主要职责是将互联网上的主机名字转为IP地址</li><li>域可以划分子域，形成多级域名，每个域名由标号序列组成，标号之间用’.’隔开，标号由英文和数字组成，不区分大小写，但有长度限制</li></ul><p><img src="https://s2.loli.net/2021/12/09/Hgupb5QkdJBEtaC.jpg"></p><ul><li>需要注意的是，DNS服务器的管辖范围是以区为单位进行管辖的，区&lt;=域，区是域的子集，一个区中的所有节点都是连通的，每个区都设置相应的权限域名服务器。</li><li>域名服务器按层次排列分别为，根域名服务器-&gt;顶级域名服务器-&gt;权限域名服务器</li></ul><p><img src="https://s2.loli.net/2021/12/09/OnqkYCjGpI3zcmV.jpg"></p><ul><li>还有一个特殊的本地域名服务器，它不属于域名服务器层次结构，当一台主机发出DNS查询请求时，这个请求就会发给本地域名服务器。</li><li>为了提高域名服务器的可靠性，通常会把数据复制到几个域名服务器中来保存，一个主域名服务器，其他为辅助域名服务器</li></ul><h3 id="解析URL哪部分？"><a href="#解析URL哪部分？" class="headerlink" title="解析URL哪部分？"></a>解析URL哪部分？</h3><ul><li>即代表主机的域名部分：<a href="http://www.example.com/">www.example.com</a></li><li>如果我输入的URL主机部分是IP地址的话，比如<a href="http://119.91.199.40/%EF%BC%8C%E6%8D%95%E6%8D%89%E7%BC%93%E5%AD%98%EF%BC%8C%E6%8D%95%E8%8E%B7%E4%B8%8D%E5%88%B0%E4%BE%BF%E8%B7%B3%E8%BF%87%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%AD%A5%E9%AA%A4%E7%9B%B4%E6%8E%A5%E4%B8%8E%E7%9B%AE%E7%9A%84%E4%B8%BB%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%AD%A5%E9%AA%A4">http://119.91.199.40/，捕捉缓存，捕获不到便跳过域名解析步骤直接与目的主机进行建立TCP连接的步骤</a></li></ul><h3 id="怎么解析的"><a href="#怎么解析的" class="headerlink" title="怎么解析的"></a>怎么解析的</h3><p>了解了DNS是个啥，也知道它对URL哪部分进行操作，那我们就正式开始看看它是怎么把一个域名解析成IP地址的</p><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ul><li>当应用进程需要把主机名解析成IP地址时，该应用进程就调用解析程序，并成为DNS的一个客户，把带解析的域名放在DNS请求报文中，为了减少开销会以UDP用户数据报方式发给本地域名服务器，采用递归查询。</li><li>本地域名服务器在查找域名后，若找到，则把对应的IP地址放在响应报文中返回，应用进程拿到IP地址即可建立连接进行通信</li><li>若本地域名服务器不能回答该请求，则本地域名服务器就暂时成为DNS中另一个客户，并向其他域名服务器发出查询请求，直到找到或者是报错为止。</li></ul><p>本地域名服务器向根服务器的查询通常都是迭代查询，也可以是递归查询</p><p>迭代查询示意图</p><p><img src="https://s2.loli.net/2021/12/09/TQivB5GRAFDaM2p.jpg"></p><p>递归查询示意图</p><p><img src="https://s2.loli.net/2021/12/09/QJ2vfWhM1dZAL7j.jpg"></p><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>我们访问网址肯定是想响应越快越好，为了优化DNS查询效率，并减轻根域名服务器的负荷和减少互联网上的DNS查询报文数量，在域名服务器中广泛使用了高速缓存。</p><p>高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录，查询时发现若有记录便直接向最近的步骤进行，而不用一步一步发送请求了。</p><p>域名服务器为了提高域名转换的准确性，需要给每一项记录设置一个失效时间值。</p><p>主机中也有高速缓存，每次我们查询时先从浏览器缓存中找，然后在主机缓存中找，最后才使用域名服务器</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>我们上面所说的是DNS的正向查询过程，即根据域名查询IP地址，但DNS还有反向查询的功能</p><p>反向查询即根据IP查询域名，主要应用到邮件服务器中来阻拦垃圾邮件确，保适当的邮件交换记录是生效的。。</p><p>由于在域名系统中，一个IP地址可以对应多个域名，从IP出发区找域名理论上需要遍历整颗域名树才能有正确完整的结果。但这很不现实，所以DNS域名系统提供了一个逆向解析域in-addr.arpa </p><p>例如一个IP地址：222.211.233.244，其逆向域名表达方式为：244.233.221.222.in-addr.arpa </p><p>实质上逆向域名解析是将IP地址表达成一个域名,以地址做为索引的域名空间,这样逆向解析的很大部分可以纳入正向解析中。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解vue3的新特性了吗？聊聊组合式API</title>
      <link href="/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/"/>
      <url>/2021/12/08/%E7%BB%84%E5%90%88%E5%BC%8FAPI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/12/482a885c45a5de21.jpg"></p><h3 id="为什么会出现，解决了啥痛点？"><a href="#为什么会出现，解决了啥痛点？" class="headerlink" title="为什么会出现，解决了啥痛点？"></a>为什么会出现，解决了啥痛点？</h3><p>​    新特性的出现肯定是为了解决和优化以往设计中的某个痛点，组合式API也一样。</p><p>​    我们都知道，代码的可重用性会增强我们应用的可维护性和灵活性，所以几乎每个前端语言框架都有组件化开发的思想，vue也不例外。</p><p>​    依据vue2的设计思想，使用 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组件选项来组织逻辑通常都很有效，但当一个组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长，这会导致组件难以阅读和理解，就像下面这样</p><ul><li><img src="https://v3.cn.vuejs.org/images/options-api.png"></li></ul><p>​    </p><ul><li>这种碎片化使得理解和维护复杂组件变得困难，选项的分离掩盖了潜在的逻辑问题，在处理单个逻辑关注点的时候得不断跳转相关代码选项块</li><li>为了能够将同一个逻辑关注点相关代码收集在一起，组合式API应运而生。</li></ul><h3 id="怎么使用组合式API"><a href="#怎么使用组合式API" class="headerlink" title="怎么使用组合式API"></a>怎么使用组合式API</h3><p>​    知道了它是怎么来的，我们还得学会怎么去使用</p><p>​    vue3是通过setup组件选项去使用组合式API的</p><h4 id="setup调用时间"><a href="#setup调用时间" class="headerlink" title="setup调用时间"></a>setup调用时间</h4><ul><li><code>setup</code> 的调用发生在 <code>data</code> property、<code>computed</code> property 或 <code>methods</code> 被解析之前，所以它们无法在 <code>setup</code> 中被获取。</li><li>执行setup时，组件实例尚未被创建，所以this在setup中无效，因为它不会找到组件实例。</li><li>setup位于生命周期图顶部</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，<code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 这里返回的任何内容都可以用于组件的其余部分</span><span class="token punctuation">&#125;</span></code></pre><h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><ul><li><p>需要注意的是，props是响应式的，即传入新的prop时，它将被更新，所以不能对props使用ES6结构，这样会消除props的响应性。需要解构可以在 <code>setup</code> 函数中使用 <a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%84"><code>toRefs</code></a> 函数来完成</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>如果 <code>title</code> 是可选的 prop，则传入的 <code>props</code> 中可能没有 <code>title</code>。在这种情况下，<code>toRefs</code> 将不会为 <code>title</code> 创建一个 ref 。你需要使用 <code>toRef</code> 替代它：</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><ul><li><p><code>context</code> 是一个普通的 JavaScript 对象，它不是响应式的，可以安全地对 <code>context</code> 使用 ES6 解构。</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>attrs</code> 和 <code>slots</code> 是有状态的对象，它们总是会随组件本身的更新而更新。注意，是组件本身！这意味着我们应该避免对attrs和slots进行解构，并始终以attrs.x的形式去使用property,但由于property是非响应式的，如果想通过attrs的更改去做事情，我们应该要在<code>onBeforeUpdate</code> 生命周期钩子执行操作</p></li><li><p>我们需要知道attrs,slots,emit，expose都是些啥</p></li></ul><h6 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Child @testAttrsItem<span class="token operator">=</span><span class="token string">"testAttrsItem"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 其实就是父组件传递的函数集合</span></code></pre><h6 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>TestSlots <span class="token operator">></span>     <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>testSlot1<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>         我是插槽<span class="token number">1</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>testSlot2<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>         我是插槽<span class="token number">2</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>TestSlots<span class="token operator">></span> <span class="token comment">// 其实就是插槽的集合</span></code></pre><h6 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h6> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">emitFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是抛出去的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">clickEmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"emitFun"</span><span class="token punctuation">,</span> <span class="token string">"param1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      clickEmit    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickEmit"</span><span class="token operator">></span>点击抛出<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">const</span> <span class="token function-variable function">monitorChildEmitFun</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>TestEmit @emitFun<span class="token operator">=</span><span class="token string">"monitorChildEmitFun"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h6 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h6><ul><li>expose函数接受一个对象参数，其中定义的property将可以被外部组件实例访问，未在其中定义变量将在父组件中访问不到</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">++</span>count<span class="token punctuation">.</span>value    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      increment    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">const</span> child<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  child<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>TestExpose ref<span class="token operator">=</span><span class="token string">"child"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><ul><li>setup返回的对象中的property以及传递给setup的props属性可以在模板中访问的到</li><li>但需要注意的是，从 <code>setup</code> 返回的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">refs</a> 在模板中访问时是<a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#ref-%E8%A7%A3%E5%8C%85">被自动浅解包</a>的，因此不应在模板中使用 <code>.value</code>。</li></ul><h4 id="使用渲染函数"><a href="#使用渲染函数" class="headerlink" title="使用渲染函数"></a>使用渲染函数</h4><ul><li><p>setup可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态</p> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> readersNumber <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">"Vue 3 Guide"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 请注意这里我们需要显式使用 ref 的 value</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>readersNumber<span class="token punctuation">.</span>value<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 父组件直接照常引入该组件进行渲染</span> <span class="token comment">// h本质上是createElement函数的别名</span></code></pre></li><li><p>返回一个渲染函数将阻止我们返回任何其它的东西，如果我们想要将这个组件的方法通过模板ref暴露给父组件就不能了，我们可以通过expose方法解决这个问题</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天学学回溯算法</title>
      <link href="/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/08/%E4%BB%8A%E5%A4%A9%E5%AD%A6%E5%AD%A6%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/25/dKINsYtbJc8Pzql.jpg" alt="微信图片_20211225135154.jpg"></p><h4 id="什么是决策树"><a href="#什么是决策树" class="headerlink" title="什么是决策树"></a>什么是决策树</h4><p>​ 在学习回溯算法前我们需要去了解一下什么是决策树，官方解释太繁琐，大概翻译成这样：</p><ul><li>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/ec140a7328539dcc.png"></li></ul><h4 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h4><p>​ 了解了决策树之后，会发现所谓回溯算法的问题其实就是决策树的遍历问题。</p><p>​ 我们需要考虑三个问题</p><ul><li>路径：当前已经做出的选择（走过的,总体相当于全排列）</li><li>选择列表：当前可以往下走的选择（未走过，可以走的）</li><li>结束条件：到决策树的底层后无法再做出选择</li><li><img src="https://s3.bmp.ovh/imgs/2021/12/8bb74e69ce6d48ce.png"></li></ul><p>​ 看看框架长啥样</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>def <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">if</span> 满足结束条件<span class="token operator">:</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> 选择 <span class="token keyword">in</span> 选择列表<span class="token operator">:</span>        #做选择        将该选择从选择列表移除    路径<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">)</span>        撤销选择        #路径<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>选择<span class="token punctuation">)</span>    将该选择再加入选择列表</code></pre><h4 id="实战一下，解决-N-皇后问题"><a href="#实战一下，解决-N-皇后问题" class="headerlink" title="实战一下，解决 N 皇后问题"></a>实战一下，解决 N 皇后问题</h4><p>​ 题目描述：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击，皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。根据输入的行数返回所有可行的放置方法。</p><p><img src="https://s3.bmp.ovh/imgs/2021/12/309f795e0f82cfe3.png"></p><p>​ 问题本质： 其实就是跟全排列差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p><p>​ 解题思路：</p><ul><li>建一个 res 数组用于返回，建一个临时数组 temp 存放某种可行放置方法</li><li>初始化 temp,每个元素以’.’填充</li><li>套用框架，建立回溯函数 backtrack</li><li>backtrack 函数信息<ul><li>默认小于当前行 row 的其他行已经成功放置了皇后</li><li>选择列表为当前行的所有列</li><li>结束条件是当前行超过题目输入的行数，满足结束条件说明该放置方法可行，将其加入 res 结果数组，这里会遇到深拷贝，浅拷贝的问题</li><li>在根据选择列表做选择前需要判定该项是否合法</li></ul></li><li>建立判定合法函数 isValid 进行判定<ul><li>先判断当前列有没有放置皇后互相冲突</li><li>然后分别检查右上方和左上方</li></ul></li></ul><p>​ 代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">solveNQueens</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traceBack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">traceBack</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> item<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        temp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>        <span class="token function">traceBack</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">temp<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><h4 id="深拷贝浅拷贝的疑惑"><a href="#深拷贝浅拷贝的疑惑" class="headerlink" title="深拷贝浅拷贝的疑惑"></a>深拷贝浅拷贝的疑惑</h4><ul><li><p>在往 res 添加可行解数组时，如果直接添加 temp 变量，后续 temp 改变会导致之前添加过的全部同步更新为 temp 当前值，因为 temp 变量只是数组实际存储在堆空间的地址引用值而已。</p></li><li><p>但疑惑的是，我通过新建一个临时变量 item 去利用一些深拷贝的方法将 temp 数组拷贝到 item，res 再添加 item，都失效了，还是会同步更新</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> item<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> item<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token operator">...</span>item<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token comment">// 以上三种方法都失效了，所以用了最笨的 for 循环挨个赋值</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
